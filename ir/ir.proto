syntax = "proto3";

package ir;

message ExportedFunction {
    uint32 id = 1;
    string name = 2;
}

message Expr {
    oneof kind {
        BinaryExpr binary = 1;
        BlockExpr block = 2;
        BrExpr br = 3;
        BrIfExpr br_if = 4;
        BrTableExpr br_table = 5;
        CallExpr call = 6;
        CallIndirectExpr call_indirect = 7;
        ConstExpr const = 8;
        CurrentMemoryExpr current_memory = 9;
        ElseExpr else = 10;
        EndExpr end = 11;
        GetGlobalExpr get_global = 12;
        GetLocalExpr get_local = 13;
        GrowMemoryExpr grow_memory = 14;
        IfExpr if = 15;
        LoadExpr load = 16;
        LoopExpr loop = 17;
        ReturnExpr return = 18;
        SelectExpr select = 19;
        SetGlobalExpr set_global = 20;
        SetLocalExpr set_local = 21;
        StoreExpr store = 22;
        TeeLocalExpr tee_local = 23;
        UnaryExpr unary = 24;
        UnreachableExpr unreachable = 25;
    }
}

message Function {
    uint32 id = 1;
    FunctionSig sig = 2;
    repeated ValueType locals = 3;
    repeated Expr exprs = 4;
    uint32 max_stack_size = 5;
    StackVars stack_vars = 6;
    bool has_labels = 7;
}

message FunctionSig {
    repeated ValueType param_types = 1;
    repeated ValueType return_types = 2;
}

message ImportedFunction {
    string module_name = 1;
    string field_name = 2;
    FunctionSig sig = 3;
    uint32 type_id = 4;
}

message Memory {
    uint32 size = 1;
    map<uint32, bytes> segments = 2;
}

message Module {
    repeated Value globals = 1;
    repeated Function functions = 2;
    repeated ExportedFunction exported_functions = 3;
    repeated ImportedFunction imported_functions = 4;
    Memory memory = 5;
    repeated TableEntry table = 6;
}

message StackVar {
    uint32 id = 1;
    ValueType value_type = 2;
}

message StackVars {
    repeated uint32 i32 = 1;
    repeated uint32 i64 = 2;
    repeated uint32 f32 = 3;
    repeated uint32 f64 = 4;
}

message TableEntry {
    sint64 function_id = 1;
    uint32 num_params = 2;
}

message Value {
    oneof kind {
        sint32 i32 = 1;
        sint64 i64 = 2;
        float f32 = 3;
        double f64 = 4;
    }
}

enum ValueType {
    I32 = 0;
    I64 = 1;
    F32 = 2;
    F64 = 3;
}

// Exprs

message BinaryExpr {
    uint32 op_code = 1;
    StackVar param1 = 2;
    StackVar param2 = 3;
    repeated StackVar returns = 4;
}

message BlockExpr {
    uint32 label_id = 1;
    bool label_used = 2;
}

message BrExpr {
    uint32 label_id = 1;
}

message BrIfExpr {
    uint32 label_id = 1;
    StackVar param = 2;
}

message BrTableExpr {
    repeated uint32 labels = 1;
    StackVar param = 2;
}

message CallExpr {
    uint32 index = 1;
    repeated StackVar params = 2;
    repeated StackVar returns = 3;
}

message CallIndirectExpr {
    uint32 index = 1;
    repeated StackVar params = 2;
    repeated StackVar returns = 3;
}

message ConstExpr {
    Value value = 1;
    repeated StackVar returns = 2;
}

message CurrentMemoryExpr {
    repeated StackVar returns = 1;
}

enum ElseExpr {
    ELSE = 0;
}

enum EndExpr {
    END = 0;
}

message GetGlobalExpr {
    uint32 index = 1;
    repeated StackVar returns = 2;
}

message GetLocalExpr {
    uint32 index = 1;
    repeated StackVar returns = 2;
}

message GrowMemoryExpr {
    StackVar param = 1;
    repeated StackVar returns = 2;
}

message IfExpr {
    uint32 label_id = 1;
    bool label_used = 2;
    StackVar param = 3;
}

message LoadExpr {
    uint32 op_code = 1;
    uint32 align = 2;
    uint32 offset = 3;
    StackVar param = 4;
    repeated StackVar returns = 5;
}

message LoopExpr {
    uint32 label_id = 1;
    bool label_used = 2;
}

message ReturnExpr {
    repeated StackVar returns = 1;
}

message SelectExpr {
    StackVar param1 = 1;
    StackVar param2 = 2;
    StackVar param3 = 3;
    repeated StackVar returns = 4;
}

message SetGlobalExpr {
    uint32 index = 1;
    StackVar param = 2;
}

message SetLocalExpr {
    uint32 index = 1;
    StackVar param = 2;
}

message StoreExpr {
    uint32 op_code = 1;
    uint32 align = 2;
    uint32 offset = 3;
    StackVar param1 = 4;
    StackVar param2 = 5;
}

message TeeLocalExpr {
    uint32 index = 1;
    StackVar param = 2;
}

message UnaryExpr {
    uint32 op_code = 1;
    StackVar param = 2;
    repeated StackVar returns = 5;
}

enum UnreachableExpr {
    UNREACHABLE = 0;
}