// Code generated by go-bindata. DO NOT EDIT.
// sources:
// template\context.go.tmpl
// template\exports.go.tmpl
// template\func.go.tmpl
// template\imp_func.go.tmpl
// template\imports.go.tmpl
// template\mem.go.tmpl

package internal


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatecontextgotmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x6f\xe2\x48\x13\x3e\x83\xc4\x7f\x28\x21\x82\xec\x79\x89\x93" +
	"\x37\x41\x1c\x90\x9c\xc3\x4e\x66\x47\x39\x90\x44\x3b\xcb\x65\xa3\x1c\x8c\xa9\x26\xad\xe0\x36\xdb\x6e\x03\x8e\x97" +
	"\xff\xbe\xea\xea\xf6\x07\x36\x19\x8d\x94\x99\x3d\xd9\xee\xae\x8f\xe7\x79\xaa\xda\x5d\x9b\x20\x7c\x0d\x56\x08\x79" +
	"\x0e\xde\xe3\xeb\x0a\x0e\x87\x5e\xb7\xd7\xe5\xd1\x26\x96\x0a\x9c\x5e\xb7\xd3\x47\x29\x63\x99\xf4\xf5\x6b\x14\xa8" +
	"\x17\xfd\x92\xe7\xe7\xc0\x19\x78\xf3\x04\xe7\x22\x09\x18\x92\x5b\xa7\x2f\x91\xad\x31\x54\x64\x9b\xd2\x46\x61\x8d" +
	"\x62\x69\x6c\x0a\xd7\xd9\x2c\xd8\xd8\x64\x9d\xfe\x8a\xab\x97\x74\xe1\x85\x71\x74\x81\xcb\x44\xbe\xb1\x8b\x28\x0a" +
	"\x36\xe7\xab\xb8\xe9\xee\x6a\x7b\x95\x6d\x10\x3e\xc7\x42\xe1\x5e\x41\xa2\x64\x1a\x2a\xc8\x7b\xdd\xce\x0c\x23\x4d" +
	"\xa3\x16\x5d\x47\xa1\xf7\x3c\x07\x5c\x27\x1a\xe6\xd3\xf3\x22\x53\xa8\xad\x83\xfd\x37\xfe\x86\xc0\x85\xd2\xbb\x2d" +
	"\x7c\xde\x1d\x69\x80\xcb\xdf\x53\x11\x2a\x1e\x8b\xc4\x18\x30\xa8\x6f\x24\xa7\xf8\xc9\x40\xac\x10\x06\x7c\x04\x83" +
	"\x2d\x4c\x7d\x1d\xec\xeb\x3a\x5e\x04\x6b\x1b\xe2\x6b\x9e\xc3\x80\xc3\xe1\xa0\xe1\x0e\xb6\xf0\x0f\x10\xa5\xd2\xbf" +
	"\x08\x46\xea\xb0\x54\x84\x70\x8f\x3b\x4b\xd8\x29\x18\x9e\xc4\xd7\x00\x57\x12\x73\xe1\x53\x21\x98\x56\x2a\xd4\xa8" +
	"\x86\x76\x25\x9f\x61\x34\x05\x81\xbb\x19\x46\xb1\xcc\x1c\xf7\xbb\x19\x46\xc0\xa6\xc0\xca\xc0\x3f\x4a\x39\xf4\x2a" +
	"\xd2\x7e\x49\x7b\x1b\xac\xd3\x13\xbc\x3b\x12\x55\x2a\x05\x84\x56\x82\x56\xcf\x90\x26\x4e\x58\x92\x72\xe1\x96\x27" +
	"\x9b\x38\x41\xc7\x05\x6a\x57\x62\x59\x44\xf1\x66\x18\x79\x73\x11\x05\x1b\xc7\xa5\x88\x94\xcb\xb4\xc3\xa9\x58\x9f" +
	"\xe3\x4d\xe6\x34\x14\x5b\x6a\x52\x9f\x42\xfd\xa6\xc3\x81\x0f\x51\xf0\x8a\x8e\xe9\xa6\x11\xac\x51\x38\x94\xc7\x75" +
	"\x35\x59\x1d\x80\xec\x46\x26\xbb\x5b\xa1\x19\x2e\x2d\xa9\x6d\x20\xe9\x7c\x7d\x91\xf2\x21\x55\x0f\xcc\xa8\x0f\xbe" +
	"\x21\x90\x78\xf7\xb8\x73\xfa\x71\xaa\x20\x66\x10\xd1\x5e\xdf\xb5\x07\xa0\x0d\x79\x25\x63\x5d\x3e\x27\xb1\x1d\xed" +
	"\x12\x68\xce\x80\x16\x7c\x1f\x2e\x69\xc1\x82\xe8\x75\x3b\x5a\x65\x81\x3b\x3a\x01\x53\xbf\x86\x1f\xfe\x47\x3e\xc6" +
	"\x3b\xf4\x8a\x53\x72\x03\x97\x30\x1c\x42\xe1\x72\x53\xdb\xa2\xc0\x9c\xd5\x63\xdc\xf8\x26\x31\x6d\x75\x36\x81\xe0" +
	"\xa1\x73\xcc\x53\x2b\x42\x20\x4a\x14\x7e\x15\xb2\xc2\xa7\xa5\x9e\x36\xb4\xb6\x0e\xa5\xd0\xc6\xac\xa6\x74\x68\x2b" +
	"\x64\x36\xaa\x8a\xdb\xee\x3a\x92\xfe\x96\x6f\x7f\xcb\xfe\x42\x19\x03\x34\xa4\x5f\xf2\x2d\x2c\x32\x78\x43\x19\x6b" +
	"\xe1\xb5\xf1\x9d\x50\x0f\x5b\x94\x6c\x1d\xef\x1a\xc6\x5c\x28\x88\xed\xd6\x71\x99\xf8\xf5\xd5\x2d\xdf\x7e\x73\xf6" +
	"\x23\xc8\x74\x65\xae\xaf\x5c\xf3\x28\x2a\x94\xd5\xca\x53\x2a\x55\xc2\x72\xad\x16\x9c\xc1\x5e\x1b\xea\x3f\xb0\x37" +
	"\xe3\xe2\x8e\x42\x0c\x87\xc6\xfd\xfc\xff\x0d\xff\x1a\xd2\x22\x82\xed\xbf\x3d\x5c\x40\x56\xff\xb5\xf0\xc9\xf8\x08" +
	"\xe0\x64\xec\x9a\xc7\x87\x01\x4e\xc6\x3f\x07\xe0\xf5\xd5\x1f\x18\xfd\x47\x0a\x5a\x10\x97\x4d\x4c\x67\x2d\xd1\x8e" +
	"\x30\xfd\x52\xd1\x7e\x14\x13\x75\xda\xfc\xa3\x3a\xd9\xf0\xe4\xe9\xa4\xe6\xb1\x77\xe1\x02\xec\x7b\xe6\xba\xed\xf6" +
	"\x99\x7f\x54\x89\x2a\xeb\x64\x4c\x59\x27\xe3\x2a\xeb\x64\xdc\xca\x4a\x3d\xf1\xab\xb8\x9e\xbd\xcf\xf5\x28\xeb\xcf" +
	"\xe5\x7a\xd6\xe6\x9a\xe7\xb0\xe3\xea\x45\xdf\xa6\x7f\x06\x8b\x35\xc2\xb9\xfe\x81\xd1\xb0\xa0\xf4\xf7\x17\xa1\x64" +
	"\x56\x1f\x81\xec\x4d\x39\x68\x4e\x66\x0c\x34\x01\xc7\x05\x33\x95\x79\x8f\x31\x17\x0a\x65\x71\xef\x16\x77\x61\x87" +
	"\x01\xad\xb3\x20\xc4\xbc\x75\x2b\x8b\x34\x7a\x0c\x64\x10\x25\xda\xa8\x76\x8b\x11\x14\x78\xca\x73\x7d\x05\x80\x07" +
	"\x87\xc3\x73\x85\xae\x12\x4f\x70\xe5\xb8\x25\xca\xda\xc0\x40\x37\x90\x77\x34\x7e\xb5\x08\xd8\x75\xfc\x1b\x06\xe8" +
	"\x15\xf3\xc8\xdd\x52\x9f\x11\xda\xa7\x84\x4f\xc5\x88\xf1\xec\x55\x58\xf5\x39\x6a\xf1\xfc\x9e\xb9\x5e\x45\xef\xbe" +
	"\x5c\x39\xe9\xc0\xc0\x3f\x2d\xa9\x29\x3e\xd3\x94\x98\x89\x54\x43\x4b\xa1\x8a\xfa\x1f\xfb\x39\x43\x56\xf4\x47\x6b" +
	"\x9e\x7c\x17\xb7\x41\xfb\xae\x2e\x55\x15\x72\x36\x05\xc1\xd7\x87\x6a\x0e\x3e\xde\x3b\x05\x75\x04\xa5\x2a\xd3\x13" +
	"\xa2\x1c\x9a\x53\xf3\xc9\x0f\xba\x7b\xcb\xaf\x7f\x03\x00\x00\xff\xff\xf5\x39\xab\xb2\x6d\x0c\x00\x00")

func bindataTemplatecontextgotmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatecontextgotmpl,
		"template/context.go.tmpl",
	)
}



func bindataTemplatecontextgotmpl() (*asset, error) {
	bytes, err := bindataTemplatecontextgotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "template/context.go.tmpl",
		size: 3181,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1661319690, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplateexportsgotmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x41\xaa\xc2\x40\x10\x44\xd7\x7f\x4e\x51\xcb\xe4\xa3\xb9\x84\xb8" +
	"\x70\x23\x2e\xbc\x40\x33\xf6\xc4\x10\xd3\x86\xc9\x04\x95\xb6\xef\x2e\x33\x81\x80\xb8\x6a\x78\xf5\xaa\x6b\x24\xdf" +
	"\x53\xcb\x50\x45\x73\xea\x5b\x98\x39\xa7\xba\x45\x24\x69\x19\xcd\x3e\x83\x30\x8b\x47\xe5\xf1\xbf\xbb\x4b\xe2\x67" +
	"\xaa\x8b\x7d\xa4\x81\xf1\x86\xe4\x63\x56\xa9\x62\xa4\x48\xc3\x84\xe6\x70\x41\x8a\x73\xa6\xb5\x2a\x1e\x5d\xba\x22" +
	"\x72\x9a\xa3\x9c\x5f\x23\x97\xd8\xac\xbc\x80\x99\x2a\x58\x16\xe0\xfe\x54\xd1\x85\x5f\x77\x01\x58\xd5\x90\xbb\x25" +
	"\xa9\xfc\x06\xdf\xc3\x81\x6e\x53\x59\x76\xe6\xd6\x82\xfb\x04\x00\x00\xff\xff\xe8\xdb\x90\x63\xe6\x00\x00\x00")

func bindataTemplateexportsgotmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplateexportsgotmpl,
		"template/exports.go.tmpl",
	)
}



func bindataTemplateexportsgotmpl() (*asset, error) {
	bytes, err := bindataTemplateexportsgotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "template/exports.go.tmpl",
		size: 230,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1659503258, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatefuncgotmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5c\x6d\x8f\xd3\x3a\x16\xfe\x4c\x7f\x85\xa9\x10\x4a\x67\x99\x0c\x9d" +
	"\xf6\x46\x68\x34\x1d\x69\xc5\xcb\xbd\x48\xb0\x20\x18\xf8\xb0\x57\xec\xc8\x4d\x9c\x8c\x2f\x89\x53\x12\x67\xe8\x50" +
	"\xfa\xdf\x57\xb1\x9d\xf7\xd8\x4e\xd2\x4e\xfb\x89\xe0\x38\xe7\x39\xcf\x73\x8e\x8f\x5f\x26\xcd\x0a\xda\xdf\xa1\x87" +
	"\xc0\x66\x03\xcc\x8f\xdf\x3d\xb0\xdd\x8e\x46\x38\x58\x85\x11\x05\xc6\xe8\xd1\x38\x80\xf4\x76\x2c\xfe\x3d\x5b\x62" +
	"\x1a\x8f\x47\x8f\x36\x1b\x80\x5d\x60\x7e\x89\xd1\x17\x12\x43\x17\x81\xed\x76\x9c\xb0\xab\xf1\x66\x03\x90\x1f\xb3" +
	"\x16\x44\xec\xd0\xc1\xc4\x3b\x5b\x62\x02\xa3\x7b\x76\x8b\x38\xa9\xfd\xc9\x68\xe4\x26\xc4\x06\x6e\x8a\xf9\xc6\x7c" +
	"\x9b\x36\x1a\x36\x5d\x83\x93\x97\x21\xa1\x68\x4d\x37\x1b\x10\x41\xe2\x21\xf0\xe4\x9f\x67\xe0\x09\x05\x17\x8b\xb4" +
	"\xdf\x67\xec\x99\x1f\x61\x04\x83\xeb\xfb\x15\x8a\xc1\x76\xfb\x0c\xf8\x9b\x0d\x78\xf2\x0f\xd8\x6e\x53\xf7\x9f\x50" +
	"\xf0\x1b\xd0\xfb\x55\x8a\x9e\x83\x4d\x46\x9b\xcd\x29\x73\x97\x1b\xf8\x0b\xc6\x9f\x10\x4d\x22\x72\xcd\x3b\x02\xee" +
	"\x43\x7a\xab\xd4\xde\xb4\x03\x36\x29\xef\xd3\xcc\x2f\x5f\xf8\xf4\x2e\xb4\xa1\xff\x15\x46\xa9\x3b\xa3\x47\x77\x30" +
	"\xe2\x2e\xf9\xe6\xdb\x57\x99\x57\xbe\x79\x7d\xbf\x2a\x2c\x8e\x1e\xdd\x80\x45\xa5\x17\x37\x2c\xb4\x29\x83\xc4\x77" +
	"\x0c\xe5\x33\x85\xf6\xf7\x0a\x46\x9c\x3e\x1d\xdf\xf1\xc7\xc5\xf5\xe7\xc4\x75\xf1\x3a\x03\x8d\xef\xcc\x2a\x11\x0e" +
	"\xab\x7c\x50\xe6\x87\xf9\x7a\xbd\x12\xe0\x42\xcb\x27\xac\xe9\x65\x18\x04\x88\x50\x7e\xe7\xec\x8c\x29\xf9\x1f\x18" +
	"\x08\xd9\x7e\x62\x7a\x0b\xcc\x57\x90\x42\xf3\xc3\x0a\x6c\xb7\x17\xec\x7e\x59\xd2\x26\x1e\x76\x01\xfa\x21\x8c\x8c" +
	"\x13\x12\x21\x68\xdf\xc2\xa5\x8f\xc6\xac\xc7\x0a\x12\x6c\x1b\xe5\x76\x80\xd6\xc8\x4e\x28\x72\xc6\x13\x61\x2c\xcd" +
	"\xbd\x8a\x95\x88\x05\x95\x1b\xe0\xd7\x55\xdf\xbe\xc2\x28\xcb\x82\x16\xdf\x1a\xe6\x3c\x44\x6f\xfc\x34\xe6\x63\xd1" +
	"\xa9\x6a\x66\x01\xf2\x16\x96\x19\x0a\x4b\x71\x61\x69\x4c\x11\x6a\xb5\x9a\xd9\x28\xdb\xe5\x48\x2a\xff\x3c\x3f\x5c" +
	"\xca\x1d\xb4\xe9\xda\xfc\x33\x6f\xfe\x93\xf5\x7d\xeb\xac\x35\x9e\x96\x6d\xca\x2d\x74\xf7\xd3\x86\x7e\xe1\x61\x23" +
	"\x1c\x22\x1a\xdc\x1c\x0f\x88\x9b\x1b\x7e\x93\x10\xfb\xad\xb3\xe6\x25\x23\xaf\x14\xfc\x1e\x2b\x0f\xbc\x34\xd4\x23" +
	"\x2a\xcd\x90\xd4\x95\x1b\x4c\x1c\x1c\x21\x9b\x72\x9f\xb0\x0b\x30\xa1\x46\x0e\x79\x9d\x26\x1b\x77\x6d\x02\x2e\xc1" +
	"\x73\xf0\xfb\xb7\xa2\xc3\xd5\x02\xf8\x88\x18\x34\x6d\x9b\xa4\x75\x23\xcb\x5c\xca\x73\x96\xd0\xe8\x1e\x84\x09\x05" +
	"\xa1\x0b\x96\x61\x42\x9c\x38\x4d\xdf\xf2\xe8\x2a\x57\x56\xe6\x0d\x7b\xf2\xef\x36\xb8\x6f\x26\x49\x02\x41\x7b\xb1" +
	"\x00\xa7\x53\x19\x20\x8e\x01\xc1\x7e\x09\x49\xd4\x69\xad\x7d\x37\xb5\x4b\xb0\xdf\xdd\xb0\x18\x41\x9d\xfd\x7e\xcc" +
	"\xe2\xec\x23\x52\x8f\x62\x19\x12\x46\x5e\x92\x96\x1b\x60\x87\x09\xa1\x20\xc0\x71\x00\xa9\x7d\xab\x96\xae\x63\x72" +
	"\x19\x27\xc6\x49\x3a\x23\x19\x8d\x09\xa8\xe4\x50\x31\xeb\x34\x52\xab\x01\x53\x9e\x5c\x2a\x3d\x0d\xa5\xd2\xc6\x64" +
	"\x32\x19\x9e\xd5\x3d\x08\x2b\xbd\x30\x8d\x03\x69\x31\x88\xa9\xb2\x3c\xc7\xc8\x2f\x0f\xe2\x9c\x20\xb3\x3b\x4b\xbd" +
	"\x78\xbc\x00\xcf\x59\x5a\xf1\x45\x4c\xfa\x68\x2e\x55\xa9\xef\x14\x6c\xb7\x7c\x4a\xe3\x80\x8a\x42\x9f\xf7\x1f\x3d" +
	"\xda\x72\x97\xf4\xe6\xcf\x7b\x9a\x3f\xe7\xe6\xa5\x25\x2c\x24\x31\xd5\xce\x48\x5f\xa1\x9f\x20\x85\x78\x62\x9d\x56" +
	"\x9f\x8d\xb3\x29\x7c\x8c\x67\xe7\x26\x74\x9c\x31\x18\x63\x6b\x2e\xae\xdc\xbc\xcd\xcd\xda\x34\x5e\xe4\x72\x81\x7f" +
	"\xb5\x92\xac\xfb\x56\x81\x8f\x93\xa5\x80\xe7\x57\x6e\xde\xe6\x66\x6d\x9d\xe1\x4f\xfb\xc3\x07\x89\x2f\xe0\xf9\x95" +
	"\x9b\xb7\xb9\x59\x5b\x67\xf8\x93\xfe\xf0\x0e\xbe\xbb\x89\x65\x10\x78\x76\xfe\x0a\xdf\x7d\x36\x9a\x50\xcf\x5a\x90" +
	"\x5a\x66\xc3\x02\xca\x9a\x6b\xa0\xac\xf9\xbe\xa0\x04\xab\x44\xcd\xea\xcb\x1e\x59\xc9\xa1\x18\xab\x7d\x40\xb9\x9c" +
	"\x95\x48\x0b\x76\xd5\x39\x2d\xce\xfa\xa7\x45\x84\x02\x65\x5a\x7c\x42\xc1\xbe\xd2\x42\x0d\x65\xcd\xf7\x05\x25\x58" +
	"\xa9\xd2\xe2\x13\x0a\xf6\x95\x16\x6a\x28\xc6\x6a\x2f\x50\x69\xad\x24\x79\xfd\x24\x7d\x6a\xe5\xd3\xfe\x69\x11\x46" +
	"\x02\x29\xbd\xe8\x0c\xf4\xbb\x3f\xd0\x3a\x47\x5a\xf7\x82\xfa\xdf\x80\xfa\x7f\xdb\xa7\xc4\x5e\x5e\x02\x23\xc1\x84" +
	"\xce\xce\x8d\x96\x48\x81\xa7\x60\x36\xd5\xa5\xc6\x30\x40\x6b\x2e\x01\xb4\x66\xba\x04\x89\x6f\x23\xf9\x08\x6b\x81" +
	"\xbc\xba\xda\x03\xc7\x61\x90\x3b\xb2\x94\x8f\x38\xc6\xa6\x95\xd4\x94\x6f\xb0\x3a\x70\xee\x42\x5a\xe5\x81\x35\x6f" +
	"\xe7\x58\xf5\x40\x25\x81\xb6\xc0\x85\x54\x9a\x5b\x9c\xdc\x12\xd3\xd8\xfc\x14\x52\x48\xd1\x3b\xe4\xaa\x45\x79\x56" +
	"\xdd\x90\x16\xce\x68\x95\xd0\xf8\x61\xcd\xeb\x7e\x28\xa5\x19\xe8\x07\xd7\x43\x5a\x3d\x86\xe8\x71\xba\x83\x20\x2a" +
	"\x47\x7a\x0b\x32\xcc\x91\xd9\xb9\x89\x7e\x88\xba\xca\x2e\xdc\xac\xc5\x15\x2d\xad\x9b\x1c\x36\x42\x17\x6d\xfb\x87" +
	"\x6c\x5b\x52\x63\x34\xad\x6f\x5b\x6a\xf7\x9f\xb7\xee\x3b\x2a\x7e\x12\x24\xfc\x64\x17\x6e\xd6\xe2\x8a\x16\xb9\x9f" +
	"\x8f\x0f\xeb\xa7\x4f\xd3\x3a\xc7\x3c\x15\x97\x2e\x6b\x15\xbe\xfa\xb2\x8d\x23\xaf\xed\x87\x76\x35\xc9\xbd\x51\x94" +
	"\xc2\xcb\xf6\x9b\xbc\x0c\x3d\x8c\x77\x5c\xbd\xaa\x77\x92\x32\x79\xd9\x7e\xf3\x21\xbd\x4b\xb5\x43\x45\x98\x51\x11" +
	"\xe6\x2c\x25\x7d\x65\x4a\x5e\x1e\x38\x25\x51\xc7\x38\x2f\x8e\x13\xe8\xba\x7b\xb2\x40\x2f\x8e\x12\x69\xaf\x18\xd0" +
	"\x5e\x31\xa0\xbd\x6c\x40\x7b\xca\x01\x7d\x75\xd0\x40\x7b\x1d\x07\xf4\xd5\x51\xe2\xdc\xf0\x4e\xb6\xee\x39\x4e\x98" +
	"\x8b\x01\xed\x15\x03\xda\xcb\x06\xb4\xa7\x1c\xd0\x57\x87\x1d\xd0\x5e\xc7\x01\x7d\x75\x9c\x01\xdd\x70\x4f\x16\xe8" +
	"\xc3\x0f\x68\x76\x98\x86\x89\x6c\xe5\xe5\xfa\x21\x4c\xe5\x0a\x20\xbd\x35\xdf\x63\x62\xb0\x06\xd9\x9a\xab\xfd\xa6" +
	"\x7e\xd9\xc5\xce\xf1\xe4\x4e\xe4\xe0\xfb\x39\x24\x0a\xe0\xba\x1b\x5d\xb8\x7e\x40\xba\x72\x27\x72\xf0\xfd\xd0\xb5" +
	"\xc3\xd5\x7d\x8c\xbd\x6e\x21\x7e\x29\x3a\x3f\x1c\x71\x9d\x3b\x55\x37\xfa\x49\xa0\xfc\x2b\x45\xa2\x3f\x67\xb7\xfd" +
	"\x5f\x1d\xf6\x42\xef\x10\x74\x30\xf1\xfe\x8b\xa2\x30\x96\xed\x86\x3a\x6d\x79\xd4\x70\xd9\x8e\xa7\x0c\x27\xdb\xf3" +
	"\x74\xda\xd8\xd8\xb4\x0b\xbb\xeb\x08\x62\x7f\x3f\xf4\x94\x78\x19\xbd\x0a\xde\x4e\xfc\x56\xe1\xca\x26\xd2\x3f\xc8" +
	"\x94\x28\x7e\x20\x28\x7e\x19\x26\xf2\x03\x8f\x4e\xf4\xb4\x70\x19\xc3\x1c\x6e\x27\x76\xe8\xc7\xaf\x7c\x5f\xfa\x4b" +
	"\x32\xf5\x8a\x5d\xe8\xf3\x87\x9b\x2a\xe2\x1f\x91\x94\x72\xa5\x90\x7c\xfe\x11\x51\x49\x11\xe9\x54\x26\x54\x40\x05" +
	"\x40\xd3\xb0\xae\x18\x22\x2c\x3d\x76\xa9\x16\x42\x84\xfd\x5d\xfc\x57\x01\x15\x00\xbd\xfd\x77\xfd\x50\x7e\xda\x5b" +
	"\x21\xf0\x26\xed\xb9\x0b\x03\x25\x54\x09\xa2\x37\x07\x1a\x25\xc4\xee\xc4\xe1\x3a\xed\xb9\x0b\x07\x25\x54\x09\xa2" +
	"\x37\x07\x82\x60\x84\xe4\x7f\xfd\xad\xb0\xf8\x14\x26\xc4\xb9\x0e\x5f\xdf\x21\xd9\xb4\xda\x89\x8b\x06\xb2\x01\xd5" +
	"\x9b\x13\x5c\x4a\xcf\xa3\x2b\x7c\xfe\xbd\x8c\x77\xe1\xa1\x80\xc9\xcd\x0f\x88\x87\x97\x9f\x7d\x79\x32\xf3\xa7\x0d" +
	"\xb3\x9a\x12\x8f\xd6\x14\x11\xe7\x26\x39\xc3\xb3\x73\xfd\xa9\x75\xfb\x34\xd2\x0d\x22\xd6\x43\xf4\xd2\x24\x9d\x31" +
	"\x7e\x46\x70\x75\x86\xad\xb9\x7a\x46\xec\x6d\x96\x8d\xa9\x9b\xf8\xcc\x55\x3a\xbc\x97\x21\x8c\xb3\x21\xac\x85\xb3" +
	"\xe6\xfb\x80\xcb\xd9\x25\x7a\x76\x49\x2f\x92\xdd\x58\xea\x60\x8b\x05\xc4\x3e\x60\xcb\xb1\xd4\x65\x89\xb2\x56\x76" +
	"\x0e\xa1\x12\xa5\xca\xaa\x27\x4a\x39\x72\x3a\x2e\xcd\xc8\x0d\x4e\x4b\x1d\x5a\x6b\xc0\xfa\xd6\xcc\xd9\xb9\xe9\xa0" +
	"\x20\xa4\x48\x05\x96\x55\xe8\x7e\x95\x33\x5d\xc6\x46\x21\xb7\x2d\xcf\x3c\x79\x86\x69\xb7\x9e\xe4\x0e\x45\x34\xab" +
	"\x6e\xf5\xb6\x7d\xb3\x29\x59\x57\x96\xec\xcc\xfa\xa0\xa2\x5d\x43\xd1\x73\x90\x2f\xf9\xb5\x3b\xe5\x9a\x7a\xd5\x36" +
	"\x0d\x72\xef\x78\x95\xac\xeb\xd5\x1b\x3a\xe5\xd5\x50\xf4\x1c\x06\xa9\xc7\xdf\x64\xc1\x84\xa2\x68\x15\x21\xda\x71" +
	"\xaa\x7a\xc3\x03\x96\xee\xd9\x06\x14\xb9\x0a\x5e\xa7\x42\xf7\x86\x53\x1c\x80\xe7\xd6\xf8\x29\xa2\x55\x66\xe6\x46" +
	"\x61\xc0\xd0\x06\x87\xae\x02\x2a\x27\x59\xa6\x57\x01\x55\x46\x52\x79\x7a\xe3\x87\xd0\x51\x1f\xde\x34\x7a\xb4\xbc" +
	"\x96\x5c\xf3\xf3\xc4\x38\x61\x4a\x4c\x0c\xfe\x43\x1a\xf3\x63\xc8\xf8\x19\x4f\x6d\xba\x36\xdf\xa3\xe0\xef\xe6\x1f" +
	"\x91\x6b\xef\x50\x7e\x70\xdd\x18\xd1\x94\xc6\xb7\x49\xcb\x6b\xc1\x92\x43\x08\x02\xa3\x7b\xf3\x1d\xa6\xd4\x47\xaf" +
	"\x89\x83\x21\x31\xbf\xf0\x5b\x03\x70\x2f\xbe\xe9\x14\xac\xe4\xe9\x60\x99\xac\xf9\x21\x65\x62\x87\x27\xed\x32\x59" +
	"\xf3\x07\x96\xc9\x1d\x9c\x4d\xa2\xe6\x1f\x4c\xa8\xd6\xd1\x7d\xb4\xf4\x72\x07\xa7\x97\xa8\xf6\x47\xd0\xad\x54\xa0" +
	"\x8e\x96\x6f\x59\xf5\x7a\xa1\x78\xcb\x93\x85\x0f\x13\xfa\x62\x88\x2f\xdf\xb4\xb3\x97\x1e\xde\x9a\x3f\x14\x7c\xce" +
	"\x5e\xf3\x6e\xda\x20\xe4\x4e\xbc\x35\xaf\xa4\xed\x1d\x58\x30\x9e\x5a\x85\xe2\x1d\xc7\x0a\x57\x82\x17\xe4\xa9\xb5" +
	"\xaf\xf1\xd2\x75\xe2\x62\xa0\xd2\x71\x32\xb5\x86\x8e\x93\xbe\xf3\xd7\x30\xe1\xac\xf9\x71\x84\xe3\x23\xe7\xb8\xc2" +
	"\x15\x19\x97\x0c\xcd\xb8\xe4\x28\x29\xb7\x7f\xcd\xfa\xe7\xda\x00\xc9\x78\xae\x1d\x41\x32\xc5\xba\xe9\x60\x92\xcd" +
	"\xce\x77\x1a\x9e\xfb\x5b\x3f\xf5\x18\x9e\x0f\xb2\x2c\x1f\x20\xdc\x4e\xb9\x76\x78\xe5\x0e\xb2\xd6\x54\xff\xf8\x90" +
	"\x86\x11\x52\xef\x0c\x45\x17\xfe\x06\x7a\x7a\x5d\x6c\x97\x5b\x55\x1e\xa4\x66\xfd\xc7\x75\x15\x39\x81\xea\xbd\xa3" +
	"\x9a\xd4\x6d\x92\x7e\x4c\xa8\x56\x55\xb9\x03\x17\xdf\x9e\x29\xe0\xfb\xcc\x21\x4c\xbd\x17\x65\x29\x5f\x14\xbf\x4e" +
	"\xef\xad\x8b\x50\xe5\x85\x46\x14\xa9\x23\x53\xab\xec\x49\xfa\x3f\x7d\x50\xfb\x95\xe3\x2e\x41\x9d\x5a\xbb\x05\x55" +
	"\x59\x96\xf5\x41\x6d\x87\xef\x53\x79\x9a\x23\x48\xa2\x5d\xbf\x0d\x5a\x17\xed\xda\xdf\x21\xea\xae\x9d\x72\x71\xae" +
	"\xd7\x4e\xf2\x0a\x53\x8f\x63\x82\x4e\xda\x0d\x38\x15\xd0\x89\xd7\x74\xfb\x20\x55\x44\x73\x4e\xda\x4f\xbe\xae\xa9" +
	"\x37\xe0\x70\xe0\x21\xe5\xdb\x21\xe7\x34\xc7\xbe\x52\xf9\x94\x13\xa0\x9d\x44\x11\x22\xf4\x26\x40\x81\x7a\xff\xec" +
	"\x23\x92\x79\x3e\x01\x67\xc0\xfa\xe3\x8f\x99\x25\xfd\x3e\x87\x17\x85\x3f\x77\x32\xc9\x62\xf9\xfe\x3d\x5c\x31\x03" +
	"\xe2\x73\x12\xa9\xd5\xf7\x28\x00\x24\xa4\x20\x4e\x56\xab\x30\xa2\xc8\x01\x3f\x6f\x11\x01\x49\x8c\x89\x07\x82\x00" +
	"\xae\xc0\x3d\xa2\xe3\x7a\x11\x48\x51\xc4\xd3\x46\xeb\x8a\x62\x02\x4e\xaa\x94\x5a\x44\x83\xc4\x01\x46\xf9\x4c\x39" +
	"\x5c\x8d\x27\xc2\xce\x5f\x30\x7e\x07\x97\x88\x7d\x3c\xc6\x5f\xfa\xb9\x7d\xd6\xc8\xbe\xdc\x73\x21\xd3\x0a\xbb\x8a" +
	"\xf7\xb1\xb2\x4f\x1f\xb4\x3f\x9a\xb6\xf0\x87\x8b\x37\xb3\xda\x7b\x2e\xc5\xbb\x38\x5e\x48\x43\xd0\xee\xa0\xfc\xd1" +
	"\x9b\x4e\x2e\xaa\x6d\xab\xcc\xd3\xe2\x7b\x41\xf1\x4f\x4c\xed\xdb\x16\x94\xca\xa7\x9c\xf8\xbd\x97\x30\x46\xfc\x43" +
	"\x46\x36\x8c\xf9\xc7\xb0\xf8\x27\x6d\x2e\x6a\xce\x34\x38\x8a\xe0\x3a\xc8\x85\x89\x4f\xeb\xdd\x99\xf1\x57\xfc\x5e" +
	"\x27\x0a\x88\x38\xb9\x44\x45\x2d\xea\x9b\x18\xfa\x8c\x4b\x71\x96\x7e\x68\x7f\x1f\x90\x76\xcd\x82\xb0\x1d\xfd\x3f" +
	"\x00\x00\xff\xff\x26\xa6\x30\x2e\x47\x4c\x00\x00")

func bindataTemplatefuncgotmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatefuncgotmpl,
		"template/func.go.tmpl",
	)
}



func bindataTemplatefuncgotmpl() (*asset, error) {
	bytes, err := bindataTemplatefuncgotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "template/func.go.tmpl",
		size: 19527,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1659503617, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplateimpfuncgotmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4a\xc5\x30\x10\x45\xd7\xe6\x2b\xee\xc2\x85\x8a\xa6\x7b\xb7" +
	"\x4a\xa1\x0b\x41\xc4\x1f\x08\xc9\xa4\x96\xb6\x69\x89\x29\x56\x86\xf9\x77\xc9\x14\x2a\xef\xed\x26\x73\xcf\xcd\x61" +
	"\x56\xe7\x47\xd7\x13\x98\x61\xdf\xc7\x1e\x22\xc6\x30\x3f\xe1\x67\x28\x5f\xb0\xdd\xbc\x2e\xb9\x50\x68\xb7\xe4\x6b" +
	"\xd4\x34\x98\x97\xb0\x4d\xf4\xac\x85\x37\x9d\x21\xf2\x88\x38\xd0\x14\x8e\x6d\x5b\xc7\x4a\xc7\xda\x8a\xcc\xb8\xb5" +
	"\xdd\x2b\x44\xee\x7c\xd9\xf1\xf0\xb2\xa4\x42\x7b\x51\xa1\xcb\x6e\xfe\xfc\x5d\xe9\x1b\x22\xf7\xff\xda\x0f\x2a\x5b" +
	"\x4e\x35\x80\x88\xfe\x09\x11\x66\x50\x0a\xba\x30\x37\xcc\x18\xe2\x15\x98\xf5\x81\x93\xf3\x65\xb7\xd1\xb6\x97\xfe" +
	"\x53\xab\x4a\x23\x7a\xec\xc1\x9b\xbf\x00\x00\x00\xff\xff\x8a\x00\x9a\xf0\x0c\x01\x00\x00")

func bindataTemplateimpfuncgotmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplateimpfuncgotmpl,
		"template/imp_func.go.tmpl",
	)
}



func bindataTemplateimpfuncgotmpl() (*asset, error) {
	bytes, err := bindataTemplateimpfuncgotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "template/imp_func.go.tmpl",
		size: 268,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1659503258, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplateimportsgotmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xcd\x4a\xc5\x30\x10\x85\xd7\xe6\x29\xce\xa2\x0b\x95\x6b\xef\xbe" +
	"\xe0\x4a\x28\xb8\x10\x8a\xf8\x02\x21\x9d\xd4\xd0\x36\x0d\x71\x8a\x2d\xc3\xbc\xbb\x24\xea\xe2\xee\xe6\xfc\xcc\xc7" +
	"\x4c\xb2\x6e\xb6\x13\x41\x04\xed\x30\x4f\x50\x35\x86\xcf\x44\x78\x5d\xd3\x96\x99\xc6\x7e\x8f\xee\x0b\x21\x32\x65" +
	"\x6f\x1d\x41\x8c\xc8\x13\xb2\x8d\x13\xa1\x09\x17\x34\x1e\xdd\x33\xda\xdb\xba\xaa\xb9\xbb\x5e\xb1\x6e\xe3\xbe\x50" +
	"\x57\xe0\x8d\x6f\xdf\xaa\x82\xea\x05\x3e\xd0\x32\xfe\xfb\x7d\x11\x75\xa5\x2f\x46\x80\xea\xbd\xe3\x03\x8f\x2f\x5b" +
	"\x64\x3a\xf8\xb7\x35\xd8\x6c\xd7\x8f\x33\x51\xa1\x3f\x88\xe0\x3b\xf0\x67\x09\xde\x89\xf7\x1c\x4b\x02\xd5\xfa\x07" +
	"\x54\x45\x40\xb1\x42\xcb\xb5\x7f\xa3\x9a\x9f\x00\x00\x00\xff\xff\x1b\xcd\xf2\x7f\xee\x00\x00\x00")

func bindataTemplateimportsgotmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplateimportsgotmpl,
		"template/imports.go.tmpl",
	)
}



func bindataTemplateimportsgotmpl() (*asset, error) {
	bytes, err := bindataTemplateimportsgotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "template/imports.go.tmpl",
		size: 238,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1659503258, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatememgotmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\xbd\x6e\xea\x30\x18\x9d\x93\xa7\xf8\x6e\x94\x2b\x25\x52\x48\x98" +
	"\x91\x18\xb8\xba\x6b\xa0\xa2\x43\x07\xc4\x60\xc2\x67\xd7\x02\xff\xc8\x31\x6a\xc0\xf2\xbb\x57\xb6\xd3\x01\xba\xd9" +
	"\xc7\xe7\xcf\x47\x93\xe1\x42\x18\x82\x73\xd0\xbe\x5d\x18\x78\x9f\x3b\xb7\x00\x4e\xa1\xed\x7b\xa2\xc3\x3d\xe7\x42" +
	"\x2b\x63\xa1\x60\xdc\x7e\xde\x4e\xed\xa0\x44\x87\xe7\xd1\x3c\x68\x27\x04\xd1\x0b\xa6\x8a\xa8\x41\x79\x8e\xf4\xae" +
	"\x83\x9e\x4c\xa0\x28\x1d\xd1\xae\xa2\x73\x4f\xa6\x1d\xa5\xe1\xb5\xeb\xe0\x9d\x3f\x10\x88\x05\xf1\x42\x0a\xf8\xc6" +
	"\x3e\x53\x91\x09\x94\x16\x4e\x77\x8b\xe3\xcc\x4a\xd0\xbf\x80\xc4\x38\x7a\x93\x03\x48\xfc\xea\x51\x28\x73\xaf\x6a" +
	"\x38\x1c\x03\x1d\x5c\x9e\xbd\xfe\x24\x13\x28\x1a\x40\x63\x60\xb5\x86\xd0\xbd\xed\x89\xde\x23\xe3\x4a\x56\x92\x5f" +
	"\x9b\xd4\x15\x45\xac\x02\xde\x37\x89\xb4\xff\xff\xb1\x9f\x8f\x9b\xed\x6e\xdb\xc0\xb2\xce\x33\x4e\xa3\xd1\x9f\x35" +
	"\x48\x7e\x0d\x61\x99\x26\x92\x0f\x15\x1a\x53\xe7\x99\x4f\xe1\x78\x1d\xf1\x27\x38\x66\x92\x0b\x56\xa9\xdf\xaf\xb0" +
	"\x7a\x96\xa4\x15\xe3\xd9\x10\xc9\x10\x4a\x45\x69\x03\xe5\x99\x58\x12\x3c\x92\x26\xad\x10\x17\xc8\x06\xa5\xef\x95" +
	"\x40\x71\x70\x2e\x92\xc1\xfb\xd5\xb1\x99\x77\x70\x4f\x56\xbc\x81\xf2\x14\x5c\x92\x9d\xf7\xce\x85\x85\x4a\x1e\x7f" +
	"\xeb\xdc\x1c\xef\x1c\x68\xc3\xa5\xa5\x50\x2c\xa7\xbf\x53\x11\x44\x11\x4d\xcf\xaf\x5d\x0d\xda\x9b\x91\x20\x50\xe4" +
	"\x3e\xff\x0e\x00\x00\xff\xff\x55\x2a\xe8\xae\x52\x02\x00\x00")

func bindataTemplatememgotmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatememgotmpl,
		"template/mem.go.tmpl",
	)
}



func bindataTemplatememgotmpl() (*asset, error) {
	bytes, err := bindataTemplatememgotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "template/mem.go.tmpl",
		size: 594,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1659503258, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"template/context.go.tmpl":  bindataTemplatecontextgotmpl,
	"template/exports.go.tmpl":  bindataTemplateexportsgotmpl,
	"template/func.go.tmpl":     bindataTemplatefuncgotmpl,
	"template/imp_func.go.tmpl": bindataTemplateimpfuncgotmpl,
	"template/imports.go.tmpl":  bindataTemplateimportsgotmpl,
	"template/mem.go.tmpl":      bindataTemplatememgotmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"template": {Func: nil, Children: map[string]*bintree{
		"context.go.tmpl": {Func: bindataTemplatecontextgotmpl, Children: map[string]*bintree{}},
		"exports.go.tmpl": {Func: bindataTemplateexportsgotmpl, Children: map[string]*bintree{}},
		"func.go.tmpl": {Func: bindataTemplatefuncgotmpl, Children: map[string]*bintree{}},
		"imp_func.go.tmpl": {Func: bindataTemplateimpfuncgotmpl, Children: map[string]*bintree{}},
		"imports.go.tmpl": {Func: bindataTemplateimportsgotmpl, Children: map[string]*bintree{}},
		"mem.go.tmpl": {Func: bindataTemplatememgotmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
