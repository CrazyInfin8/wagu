// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/context.go.tmpl
// template/exports.go.tmpl
// template/func.go.tmpl
// template/imp_func.go.tmpl
// template/imports.go.tmpl
// template/mem.go.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateContextGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xc1\x4e\xe3\x3a\x14\x5d\xc7\x5f\x71\x55\x95\x2a\x46\x21\xf0\xa0\xea\xa2\x52\x37\x0f\x78\x4f\x5d\x94\x87\xde\x0c\x9b\x41\x2c\xd2\xe4\xa6\x58\x24\x4e\xc7\x75\xd3\x06\x8f\xff\x7d\x64\x3b\x4d\x9a\x32\x83\x90\x3a\xac\xd2\xd8\xf7\xdc\x73\xce\x8d\xeb\xb3\x8c\xe2\x97\x68\x81\xa0\x14\x84\xf7\x2f\x0b\xd0\x9a\x10\x96\x2f\x0b\x21\xc1\x27\x5e\x0f\x85\x28\xc4\xaa\x47\xbc\x5e\x1e\xc9\xe7\x1e\xa1\x84\xc8\x6a\x89\x70\x5d\x70\x89\x5b\x09\x2b\x29\xd6\xb1\x04\x45\xbc\x19\xe6\xf0\xf8\x34\xaf\x24\x12\x4f\xa9\x33\x60\x29\x84\xb3\x70\x6a\x5b\x61\xf2\xcf\x9a\xc7\x92\x15\x7c\x65\x08\xbc\x14\xf6\xd7\x57\x0e\x80\x3c\xb1\x9b\xe6\xb7\x88\xf8\x02\xa1\xcf\x02\xe8\x97\x30\x9e\x98\x4e\xff\x66\xc5\x3c\xca\x1c\x7e\xa1\x14\xf4\x19\x68\x6d\x64\xf7\x4b\xf8\x01\x56\xd4\x0e\x5d\x77\xd2\x84\xa4\x6b\x1e\xc3\x1d\x6e\x6a\xb9\xbe\x52\xef\xe8\x3a\x50\xa5\x54\xdd\x88\xc2\xe9\xce\xae\x22\x5e\x6c\xf4\x0c\xea\x05\x35\xc3\x7c\x0c\x1c\x37\x33\xcc\x0b\x51\xf9\xf4\x5d\x82\x00\xd2\x31\xa4\x4d\xdf\x8f\x79\x8d\xc3\xd6\xed\xa4\xf1\x5b\x46\xd9\xfa\x8d\x61\x4f\xa0\x5c\x0b\x0e\x71\x63\xdd\x8f\x1b\xed\x14\xae\x8b\x65\xe5\x77\xcd\x24\x86\xf0\x34\x26\x5e\x12\x9a\xef\x37\x81\x3c\x7a\x41\xdf\x7d\xc6\x00\x32\xe4\x7e\x6c\x36\x28\x25\x5e\x6c\xd0\xb6\x2c\x00\xb7\xd8\xf0\x0d\x92\x5f\x13\x2e\x44\x61\x06\xe3\xaf\xd8\x2b\x02\xe3\x92\xda\xf9\xd5\x4c\xd1\x72\x89\x3c\x71\xfd\x83\x2e\xaf\xa9\xa7\x61\x18\x52\xd3\xb6\x8c\x84\x39\x89\xb7\x42\xdc\xb0\xf2\xef\xea\x1b\x8a\x02\x00\x26\xe0\x4e\x66\x78\x87\x1b\xbf\x97\xb0\x12\xe6\x15\xbc\xa2\x28\x7a\xd4\xd6\x4e\xb9\xfc\xaf\x44\x91\x66\xc5\xe6\xa0\x96\x71\x09\x45\xbd\xd5\xa3\xe6\x40\x5b\xe1\xec\xea\xf2\x86\x95\x5f\xfc\x6d\x00\x95\xd1\x7a\x75\x49\xdd\xc3\x68\x66\x29\x54\x30\x99\xc0\x85\x79\xf1\x96\x11\x67\xb1\xbf\x2f\x88\x12\x4f\xdb\xaa\xad\xa9\x32\xff\x94\x70\xc6\xf8\xd4\xc2\x07\x03\x87\x3d\xfb\xab\x0b\xde\x53\xe8\xe0\xf5\x30\xb7\x70\x0e\x55\x33\x4f\x36\x1a\x76\x64\x8d\x86\xd4\x3d\x8e\x92\x35\x1a\x1e\x2b\xeb\xea\xf2\x7f\xcc\x3f\x7f\x5a\x35\xf9\x45\x57\xc9\x49\x77\x40\x1d\x25\x9f\x35\xa0\x0f\x28\xb1\x27\xe8\xe1\x98\x99\xd4\x7d\x2d\xca\x5f\xbb\xc7\x96\xc2\x39\xd4\xbf\x2b\x4a\x0f\x4e\xc6\xc3\x31\xc6\x5b\xba\xd1\xd0\xd2\x8d\x86\x2d\xdd\x68\xd8\xa5\xb3\x5f\xfc\x33\xdc\x9d\xfc\xc6\x5d\x87\xee\xcf\xb9\x3b\x39\x70\xa7\x14\x6c\x98\x7c\x36\xd7\xee\xd7\x68\x9e\x21\x9c\x69\xed\x32\x4e\x9a\xd7\x5b\x2e\x45\xb5\x17\x73\xa9\x69\x88\x22\x8d\x62\x54\x9a\x78\x7c\x9d\xdf\x47\x22\xca\x57\x66\x79\x77\x5d\x59\x20\x3c\x3e\xb5\x0d\x76\xae\x38\x93\xbe\xbd\x05\x5d\x49\x73\xdf\xb6\x95\x81\xb9\xe2\x33\xe4\x10\x9a\xe4\x79\x93\x10\x68\x13\xc2\x5e\xf6\x16\xf3\xb8\xcb\x86\x27\x17\x0e\x2c\x05\xfc\x0e\x7d\x0c\x77\xb9\x33\x4d\xcc\x09\xd6\xba\x65\x50\xe9\x18\x38\xcb\x02\x68\xb4\x8f\xe1\x42\x9b\x54\xca\x56\xf8\xa6\xd2\xc4\x55\xb7\x9d\xc9\xb1\x3d\xa8\xdb\xbf\x6b\xe6\xa0\xb5\x6e\x12\xee\x20\x8e\xdb\xf5\x9f\x01\x00\x00\xff\xff\x66\x54\x95\x5f\x76\x08\x00\x00")

func templateContextGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateContextGoTmpl,
		"template/context.go.tmpl",
	)
}

func templateContextGoTmpl() (*asset, error) {
	bytes, err := templateContextGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/context.go.tmpl", size: 2166, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateExportsGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x41\xaa\xc2\x40\x10\x44\xd7\x7f\x4e\x51\xcb\xe4\xa3\xb9\x84\xb8\x70\x23\x2e\xbc\x40\x33\xf6\xc4\x10\xd3\x86\xc9\x04\x95\xb6\xef\x2e\x33\x81\x80\xb8\x6a\x78\xf5\xaa\x6b\x24\xdf\x53\xcb\x50\x45\x73\xea\x5b\x98\x39\xa7\xba\x45\x24\x69\x19\xcd\x3e\x83\x30\x8b\x47\xe5\xf1\xbf\xbb\x4b\xe2\x67\xaa\x8b\x7d\xa4\x81\xf1\x86\xe4\x63\x56\xa9\x62\xa4\x48\xc3\x84\xe6\x70\x41\x8a\x73\xa6\xb5\x2a\x1e\x5d\xba\x22\x72\x9a\xa3\x9c\x5f\x23\x97\xd8\xac\xbc\x80\x99\x2a\x58\x16\xe0\xfe\x54\xd1\x85\x5f\x77\x01\x58\xd5\x90\xbb\x25\xa9\xfc\x06\xdf\xc3\x81\x6e\x53\x59\x76\xe6\xd6\x82\xfb\x04\x00\x00\xff\xff\xe8\xdb\x90\x63\xe6\x00\x00\x00")

func templateExportsGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateExportsGoTmpl,
		"template/exports.go.tmpl",
	)
}

func templateExportsGoTmpl() (*asset, error) {
	bytes, err := templateExportsGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/exports.go.tmpl", size: 230, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateFuncGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x5b\x6f\xdb\x38\x16\x7e\x8e\x7f\x05\x6b\x04\x03\xa7\x9b\xca\xf5\x65\x84\x20\x88\x03\x2c\xd2\x66\xa7\x40\xba\x2d\x92\x4c\x1f\x76\xd0\x0d\x68\x89\x52\x38\x95\x28\x47\xa2\x12\xa7\xae\xff\xfb\x40\xa4\xee\x16\x2f\x92\x1d\xe7\x29\x0a\x45\x9d\xef\xfb\xce\x39\x3c\x14\x29\x73\x01\xad\x1f\xd0\x45\x60\xb5\x02\xc6\xd7\x1f\x2e\x58\xaf\x7b\x3d\xec\x2f\x82\x90\x82\x41\xef\xa0\x8f\x88\x15\xd8\x98\xb8\xc3\x39\x26\x30\x7c\xee\xf7\x0e\xfa\x3e\xa4\xf7\xd9\xdf\xe1\x1c\xd3\xa8\xdf\x3b\xea\xf5\x9c\x98\x58\xc0\x49\xac\x5c\x1a\x9f\x6c\xb0\x5e\x0f\x2c\xba\x04\x6f\x2f\x02\x42\xd1\x92\xae\x56\x20\x84\xc4\x45\xe0\xf0\xef\x63\x70\x48\xc1\xe9\x2c\xe9\x77\x83\x5d\xe3\x2b\x0c\xa1\x7f\xfb\xbc\x40\x11\x58\xaf\x8f\x81\xb7\x5a\x81\xc3\xbf\xc1\x7a\x9d\x10\x3a\xa4\xe0\x17\xa0\xcf\x0b\x04\xd6\xeb\xd5\x0a\x20\x92\xd8\x3d\xea\xad\x56\xef\x00\x76\x32\x03\x7f\xc0\xe8\x1a\xd1\x38\x24\xb7\xbc\x23\xe0\x1c\x92\x5b\xa5\xf6\x4d\x3b\x60\xd5\x3b\x48\x2c\xa5\xbc\xbc\x94\xd3\x55\x60\x41\xef\x1b\x0c\x13\x3a\xbd\x83\x47\x18\x72\x4a\x9e\xf1\xe9\x43\xc6\xca\x33\x6e\x9f\x17\x85\xc5\xde\xc1\x1d\x98\x55\x7a\x71\xc3\x1c\xa6\x02\x12\x3d\x32\x94\x1b\x0a\xad\x1f\x15\x8c\x28\x79\x3a\x7a\xe4\x8f\xa7\xd7\x37\xb1\xe3\xe0\x65\x06\x1a\x3d\x1a\x55\x21\x1c\x56\xfa\xa0\x88\x87\xf1\x71\xb9\x48\xc1\x53\x5f\x1e\xb2\xa6\x8b\xc0\xf7\x11\xa1\xfc\xce\x70\xc8\x3c\xf9\x5f\xe8\xa7\x6e\x7b\xc2\xf4\x1e\x18\x1f\x20\x85\xc6\x97\x05\x58\xaf\x4f\xd9\xfd\xb2\x4b\x37\xf1\xb0\x03\xd0\x43\x6a\xa4\x1f\x93\x10\x41\xeb\x1e\xce\x3d\xd4\x67\x3d\x16\x90\x60\x6b\x50\x6e\x07\x68\x89\xac\x98\x22\xbb\x7f\x94\x1a\xf3\x22\x54\xb5\x12\xb2\xa0\x72\x03\xfc\xba\xca\xed\x1b\x0c\xb3\x2c\x68\xe0\xb6\x61\xce\x45\xf4\xce\x4b\x62\xde\x4f\x3b\x55\xcd\xcc\x40\xde\xc2\x32\x43\x62\x29\x2a\x2c\xf5\x29\x42\x8d\x56\x33\x1b\x65\xbb\x1c\x49\xc6\xcf\xf5\x82\xb9\x98\xa0\x45\x97\x86\x9b\x37\xff\x87\xf5\xfd\x64\x2f\x15\x4c\xcb\x36\xc5\x16\xf4\x79\x5a\xd0\x2b\x18\x6e\x84\x23\x8d\x06\x37\xc7\x03\xe2\xe4\x86\x2f\x63\x62\x7d\xb2\x97\xbc\x64\xe4\x95\x82\xdf\x63\xe5\x81\x97\x86\x7a\x44\x85\x19\x92\x50\xb9\xc3\xc4\xc6\x21\xb2\x28\xe7\x84\x1d\x80\x09\x1d\xe4\x90\xb7\x49\xb2\x71\x6a\x47\xe0\x0c\xbc\x07\xbf\x7e\x49\x3a\x9c\xcf\x80\x87\xc8\x80\x26\x6d\x47\x49\xdd\xc8\x32\x97\xf2\x9c\x25\x34\x7c\x06\x41\x4c\x41\xe0\x80\x79\x10\x13\x3b\x4a\xd2\x97\xc3\xb2\x2e\x7f\x35\xd9\xfd\x6e\x38\x60\x36\x03\x04\x7b\x22\x93\x38\x4a\xee\xea\xd9\x22\xb1\x9f\xfa\xea\x0d\x73\xb2\x87\x48\xdd\x85\x65\x18\x18\xba\x71\x32\xd6\x81\x15\xc4\x84\x02\x1f\x47\x3e\xa4\xd6\x7d\x8a\xa5\x19\x42\xa9\x36\x63\x90\x4c\x09\x83\x8d\x19\xa0\x44\xaa\x28\xfb\x1b\xb1\xdd\x60\x50\xae\xee\x95\x9e\x3b\x4a\x9a\x08\x79\xe5\x6c\xc9\x45\x31\x5b\x93\x04\xf9\xcd\x0c\xbc\x67\x2e\x5c\xad\xb2\x47\x73\xf7\x94\xfa\x8e\xc0\x7a\xcd\x6b\x27\x47\x94\x54\x94\xbc\x7f\xef\x60\xcd\x29\xa9\xcd\x8f\x5b\x9a\x1f\x73\xf3\xc2\xb1\x12\x90\x88\x2a\x4b\xdf\x37\xe8\xc5\x48\x32\xf8\xd3\x97\x83\x7a\xd9\xcf\xe6\x8a\x3e\x9e\x8c\x0d\x68\xdb\x7d\xd0\xc7\xe6\x34\xbd\x72\xf2\x36\x27\x6b\x53\xb0\xc8\xdd\x05\xfe\xd5\x28\xb2\xce\xad\x02\x1f\xc5\xf3\x14\x9e\x5f\x39\x79\x9b\x93\xb5\x69\xc3\xbf\x6b\x0f\xef\xc7\x5e\x0a\xcf\xaf\x9c\xbc\xcd\xc9\xda\xb4\xe1\xdf\xb6\x87\xb7\xf1\xe3\x5d\x24\x82\xc0\x93\xf1\x07\xfc\x78\x33\xd8\x84\x3a\x6e\x40\x6a\x18\x41\x05\x94\x39\x55\x40\x99\xd3\x5d\x41\xa5\xaa\x62\xb9\xaa\x3f\x77\xa8\x4a\x0c\xc5\x54\xed\x02\xca\xe1\xaa\xd2\xb4\x60\x57\xda\x69\x31\x6c\x9f\x16\x21\xf2\xa5\x69\x71\x8d\xfc\x5d\xa5\x85\x1c\xca\x9c\xee\x0a\x2a\x55\x25\x4b\x8b\x6b\xe4\xef\x2a\x2d\xe4\x50\x4c\xd5\x4e\xa0\x92\x5a\x49\xf2\xfa\x49\xda\xd4\xca\xdf\xda\xa7\x45\x10\xa6\x48\xc9\x85\x36\xd0\xaf\xf6\x40\xcb\x1c\x69\xd9\x0a\xea\xff\x1d\xea\xff\x7d\x9b\x12\x7b\x76\x06\x06\x31\x26\x74\x32\x1e\x34\x44\x0a\xfc\x06\x26\x23\x55\x6a\x74\x03\x34\xa7\x02\x40\x73\xa2\x4a\x90\xe8\x3e\x14\x8f\xb0\x06\xc8\xf3\xf3\x1d\x68\xec\x06\xb9\xa5\x4a\xf1\x88\x63\x6a\x1a\x45\x8d\xf8\x9b\xbc\x86\x66\x1d\xd1\x32\x06\xe6\xb4\x59\x63\x95\x81\xcc\x05\xca\x02\x17\x50\x61\x6e\x71\x71\x73\x4c\x23\xe3\x3a\xa0\x90\xa2\x2b\xe4\xc8\x9d\x72\x5c\x5d\xf9\x14\x64\x94\x9e\x50\xf0\x30\xa7\x75\x1e\x52\xd7\x74\xe4\xc1\xfd\x21\xac\x1e\x5d\xfc\xf1\x6e\x0b\x87\xc8\x88\xb4\x76\x48\x37\x22\x93\xb1\x81\x1e\xd2\xba\xca\x2e\x9c\xac\xc5\x49\x5b\x1a\x17\x39\x6c\x84\xce\x9a\xd6\x0f\xd9\xb2\xa4\xa6\x68\x54\x5f\xb6\xd4\xee\xbf\x6f\x5c\x77\x54\x78\x12\x94\xf2\x64\x17\x4e\xd6\xe2\xa4\x2d\x62\x9e\x6f\xf6\xcb\xd3\xa3\x49\x9d\x63\x4c\xd3\x4b\x87\xb5\xa6\x5c\x3d\xd1\xc2\x91\xd7\xf6\x7d\x53\x8d\x73\x36\x92\x52\x78\xd6\x7c\x93\x97\xa1\x97\x61\xc7\xbd\x57\x65\x27\x28\x93\x67\xcd\x37\x5f\x92\x5d\xe2\x3b\x54\x84\x19\x15\x61\xce\x52\xd2\x93\xa6\xe4\xd9\x9e\x53\x12\x69\xc6\x79\xf6\x3a\x81\xae\xd3\x13\x05\x7a\xf6\x2a\x91\x76\x8b\x01\xed\x16\x03\xda\xcd\x06\xb4\x2b\x1d\xd0\xe7\x7b\x0d\xb4\xab\x39\xa0\xcf\x5f\x25\xce\x1b\xec\x44\xef\x3d\xaf\x13\xe6\x62\x40\xbb\xc5\x80\x76\xb3\x01\xed\x4a\x07\xf4\xf9\x7e\x07\xb4\xab\x39\xa0\xcf\x5f\x67\x40\x6f\xd0\x13\x05\x7a\xff\x03\x9a\x6d\xa6\x61\x22\x7a\xf3\x72\xbc\x00\x26\xee\xf2\x21\xbd\x37\x3e\x63\x32\x60\x0d\xa2\x77\xae\xe6\x9b\xea\xd7\x2e\xb6\x8f\x27\x26\x91\x83\xef\x66\x93\xc8\x87\x4b\x3d\xb9\x70\xf9\x82\x72\xc5\x24\x72\xf0\xdd\xc8\xb5\x82\xc5\x73\x84\x5d\xbd\x10\x5f\xa4\x9d\x5f\x4e\xb8\x8a\x4e\x95\x46\x3b\x17\x48\xbf\x56\xc6\xea\x7d\x76\xcb\xfb\xa9\xb1\x16\xba\x42\xd0\xc6\xc4\xfd\x1f\x0a\x83\x48\xb4\x1a\xd2\x5a\xf2\xc8\xe1\xb2\x15\x4f\x19\x4e\xb4\xe6\xd1\x5a\xd8\x58\x54\x47\xdd\x6d\x08\xb1\xb7\x1b\x79\x52\xbc\x4c\x5e\x05\x6f\x2b\x7d\x8b\x60\x61\x11\xe1\x07\x99\x92\xc4\x2f\x04\x45\x17\x41\x2c\xde\xf0\xd0\x92\xa7\x84\xcb\x14\xe6\x70\x5b\xa9\x43\x0f\x3f\xf3\x75\xe9\x4f\xc1\xd4\x9b\xae\x42\xdf\xbf\xdc\x54\x11\x3d\x84\x42\xc9\x95\x42\x72\xf3\x10\x52\x41\x11\xd1\x2a\x13\x32\xa0\x02\x60\xd3\xb0\xaa\x18\x22\x2c\xdc\x76\xa9\x16\x42\x84\xbd\x6d\xf8\xcb\x80\x0a\x80\xd6\xfc\x1d\x2f\x10\xef\xf6\x56\x04\x5c\x26\x3d\xb7\x51\x20\x85\x2a\x41\xb4\xd6\x40\xc3\x98\x58\x5a\x1a\x6e\x93\x9e\xdb\x68\x90\x42\x95\x20\x5a\x6b\x20\x08\x86\x48\xfc\xf5\xb7\xa2\xe2\x3a\x88\x89\x7d\x1b\x7c\x7c\x44\xa2\x69\x55\x4b\x8b\x02\x72\x03\xaa\xb5\x26\x38\x17\xee\x47\x57\xf4\xfc\x7b\x1e\x6d\xa3\x43\x02\x93\x9b\xef\x10\x0f\x37\xdf\xfb\x72\x45\xe6\xdf\x6d\x98\x55\x94\x78\xb4\xa4\x88\xd8\x77\xf1\x10\x4f\xc6\xea\x5d\xeb\xe6\x69\x44\x0f\x22\x52\x43\xb4\xf2\x49\x32\x63\x3c\x85\x70\x31\xc4\xe6\x54\x3e\x23\xb6\x36\xcb\xc6\xd4\x5d\x34\x74\xa4\x84\x77\x32\x84\x71\x36\x84\x95\x70\xe6\x54\x13\x4e\x4b\x5c\xac\x16\x17\xb7\xd2\xa8\x27\x52\x05\x5b\xbc\x3f\xec\x02\xb6\x1c\x4a\x55\x92\x48\x4b\xa5\x76\x04\xa5\x28\x55\x55\x5b\x44\x4e\xa5\x65\x33\x72\x9d\xb3\x52\x85\xd6\x18\xb0\xb6\x25\x73\x32\x36\x6c\xe4\x07\x14\xc9\xc0\xb2\x02\xdd\xae\x70\x26\x6f\xb1\x61\xc0\x6d\x8b\x33\x4f\x9c\x61\xca\x95\x27\x79\x44\x21\xcd\x8a\x5b\xbd\x6d\xd7\x6a\x4a\xd6\xa5\x15\x3b\xb3\xde\xa9\x66\xd7\x50\xd4\x1a\xc4\x6f\xfc\xca\x85\x72\xcd\x7b\xd5\x36\x05\x72\xeb\x78\x95\xac\xab\xbd\xd7\x75\xc6\xab\xa1\xa8\x35\x74\xf2\x1e\xff\x21\x0b\x26\x14\x85\x8b\x10\x51\xcd\x99\xea\x92\x07\x2c\x59\xb2\x75\x28\x72\x15\x3c\xad\x42\x77\xc9\x25\x76\xc0\x73\x6a\xfa\x24\xd1\x2a\x2b\x73\xc2\xc0\x67\x68\x9d\x43\x57\x01\x15\x8b\x2c\xcb\xab\x80\x4a\x23\x29\xdd\xbc\xf1\x02\x68\xcb\xf7\x6e\xca\x3d\x44\x6b\x7f\x02\xc3\x67\xe3\x0a\x53\xea\xa1\x8f\xc4\xc6\x90\x18\x7f\xf2\x5b\x16\x5d\x1a\x9f\x91\xff\xd7\xe6\x37\xe3\xda\x4f\x26\xbf\x38\x4e\x84\x68\x42\xfb\xf4\xbb\x32\x27\x14\x94\xd8\xfe\x40\x33\x25\x73\xfa\x02\x94\x1c\x85\x97\x1a\x73\x65\xaf\x4e\x73\x14\x4e\x6b\x4c\xac\xbd\xfa\x30\xcb\xb4\x13\xc9\x0f\xf2\x98\x73\x30\xa1\x27\x5d\xf0\xf5\xb2\x4a\x0e\x6f\x4e\x5f\x0a\x3e\x57\xaf\xf8\x19\x51\x27\x64\x2d\xdd\x8a\x5f\x0f\xed\x1c\x38\x55\x3c\x32\x35\x02\x3e\x32\x85\xc9\x38\x32\xbb\x26\xa3\x8e\x5b\x14\xec\x78\x3e\xec\x9f\x5d\xe1\x3b\x45\xba\xec\x9e\x97\x9e\xd3\x14\xc9\xf4\x2a\xb4\x26\x63\x8d\x58\xbe\xc8\x6c\xa6\xc9\xae\xa3\xd3\xb6\x9e\x30\xa4\xef\x07\x11\x0d\x42\x24\x7f\x41\x48\xbb\xf0\xdf\x21\x26\xd7\xd9\x5b\x53\x13\xe3\xaf\x31\x55\x92\xae\x1f\xa7\x28\xb3\x3e\x96\x7c\x67\x56\xfe\x4c\x33\x21\x77\x52\x66\x7a\x52\x9c\x35\x6b\x4b\xe5\x3b\xe0\xdf\x94\x4f\x9a\x98\xe8\x10\x19\x99\x65\x26\xc9\x7f\x0a\x9f\x49\x47\x87\xda\x67\x23\xb3\xb5\xcf\x32\x72\x4a\x6a\xd2\x09\x42\x4d\x4d\xf0\xc5\x53\xf5\xc9\x44\x8b\xda\x16\x99\xa6\x58\xbd\xa8\x49\xee\xc3\x7f\x8a\x25\xcf\x58\x7b\x25\x60\xc5\x61\x88\x08\xbd\xf3\x91\x2f\x9f\x54\x3c\x44\x32\xb6\x47\x60\x08\xcc\xdf\x7f\x9f\x98\xc2\x23\x6c\x6e\x18\x3c\x75\x36\xc9\xce\x80\x86\xc1\xd3\x67\xe4\x0f\x1a\x6b\xdb\x11\x78\xdb\x88\x0f\x89\x0d\x06\xe5\x45\x4e\xb0\xe8\x1f\xa5\xcf\xfe\x01\xa3\x2b\x38\x47\xec\xd4\xac\x37\xf7\x72\x9b\xac\x91\x1d\x59\x3e\x15\x89\xc1\x8e\xe4\xfb\x60\x76\x14\xaf\xf9\xd1\xa4\x85\x3f\x5c\x7c\x29\x14\x9c\x5b\x4b\xbf\x0d\xb9\x01\x0d\x40\x33\x41\xf1\xa3\x77\x5a\x14\xe5\xb6\x65\xe6\x69\x71\x50\x3a\x7a\xc2\xd4\xba\x6f\x40\xa9\x9c\x61\xe7\xf7\x2e\x60\x84\xf8\x09\x6e\x0b\x46\xfc\x5c\x3f\x3f\xcb\x7b\x5a\x23\xb3\xa1\x31\x4d\x59\x1b\x39\x30\xf6\x68\xbd\x3b\x33\xfe\x81\xdf\xd3\x92\x80\x88\x9d\xbb\xa8\x98\xd2\xda\x26\x46\xc3\x38\xaa\x65\x5c\x82\x33\xf7\x02\xeb\x47\x87\xb4\xdb\x3c\xb6\xbe\xee\xfd\x13\x00\x00\xff\xff\xc7\xe8\x4d\x59\x12\x41\x00\x00")

func templateFuncGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateFuncGoTmpl,
		"template/func.go.tmpl",
	)
}

func templateFuncGoTmpl() (*asset, error) {
	bytes, err := templateFuncGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/func.go.tmpl", size: 16658, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateImp_funcGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4a\xc5\x30\x10\x45\xd7\xe6\x2b\xee\xc2\x85\x8a\xa6\x7b\xb7\x4a\xa1\x0b\x41\xc4\x1f\x08\xc9\xa4\x96\xb6\x69\x89\x29\x56\x86\xf9\x77\xc9\x14\x2a\xef\xed\x26\x73\xcf\xcd\x61\x56\xe7\x47\xd7\x13\x98\x61\xdf\xc7\x1e\x22\xc6\x30\x3f\xe1\x67\x28\x5f\xb0\xdd\xbc\x2e\xb9\x50\x68\xb7\xe4\x6b\xd4\x34\x98\x97\xb0\x4d\xf4\xac\x85\x37\x9d\x21\xf2\x88\x38\xd0\x14\x8e\x6d\x5b\xc7\x4a\xc7\xda\x8a\xcc\xb8\xb5\xdd\x2b\x44\xee\x7c\xd9\xf1\xf0\xb2\xa4\x42\x7b\x51\xa1\xcb\x6e\xfe\xfc\x5d\xe9\x1b\x22\xf7\xff\xda\x0f\x2a\x5b\x4e\x35\x80\x88\xfe\x09\x11\x66\x50\x0a\xba\x30\x37\xcc\x18\xe2\x15\x98\xf5\x81\x93\xf3\x65\xb7\xd1\xb6\x97\xfe\x53\xab\x4a\x23\x7a\xec\xc1\x9b\xbf\x00\x00\x00\xff\xff\x8a\x00\x9a\xf0\x0c\x01\x00\x00")

func templateImp_funcGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateImp_funcGoTmpl,
		"template/imp_func.go.tmpl",
	)
}

func templateImp_funcGoTmpl() (*asset, error) {
	bytes, err := templateImp_funcGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/imp_func.go.tmpl", size: 268, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateImportsGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xcd\x4a\xc5\x30\x10\x85\xd7\xe6\x29\xce\xa2\x0b\x95\x6b\xef\xbe\xe0\x4a\x28\xb8\x10\x8a\xf8\x02\x21\x9d\xd4\xd0\x36\x0d\x71\x8a\x2d\xc3\xbc\xbb\x24\xea\xe2\xee\xe6\xfc\xcc\xc7\x4c\xb2\x6e\xb6\x13\x41\x04\xed\x30\x4f\x50\x35\x86\xcf\x44\x78\x5d\xd3\x96\x99\xc6\x7e\x8f\xee\x0b\x21\x32\x65\x6f\x1d\x41\x8c\xc8\x13\xb2\x8d\x13\xa1\x09\x17\x34\x1e\xdd\x33\xda\xdb\xba\xaa\xb9\xbb\x5e\xb1\x6e\xe3\xbe\x50\x57\xe0\x8d\x6f\xdf\xaa\x82\xea\x05\x3e\xd0\x32\xfe\xfb\x7d\x11\x75\xa5\x2f\x46\x80\xea\xbd\xe3\x03\x8f\x2f\x5b\x64\x3a\xf8\xb7\x35\xd8\x6c\xd7\x8f\x33\x51\xa1\x3f\x88\xe0\x3b\xf0\x67\x09\xde\x89\xf7\x1c\x4b\x02\xd5\xfa\x07\x54\x45\x40\xb1\x42\xcb\xb5\x7f\xa3\x9a\x9f\x00\x00\x00\xff\xff\x1b\xcd\xf2\x7f\xee\x00\x00\x00")

func templateImportsGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateImportsGoTmpl,
		"template/imports.go.tmpl",
	)
}

func templateImportsGoTmpl() (*asset, error) {
	bytes, err := templateImportsGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/imports.go.tmpl", size: 238, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMemGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x31\x6b\xc3\x30\x10\x85\x67\xeb\x57\x3c\x82\x0b\x0e\xb8\x75\x67\x43\x87\x76\x37\x2d\x74\x0c\x19\x14\xe7\x64\x8c\x39\xd9\x28\x0a\xb5\x2b\xee\xbf\x17\x49\xe9\x90\x8c\xfa\xee\xd3\x7b\x6f\xd1\xfd\xa4\x07\x42\x08\x78\xf9\x9a\x06\x88\x28\xd5\x34\xe8\xf4\x8a\xd9\x98\x0b\xf9\x36\x9d\x3a\xbd\x7e\x1a\x13\xaf\x4d\x83\xef\xf1\x97\xa0\x3d\xf8\x41\x8a\xfc\xdd\xdf\xab\x34\x30\x59\x8f\xd3\xe6\xe9\x72\xb3\x32\xfa\x88\x24\xd5\x99\xab\xed\x61\xe9\xa7\x23\x9e\xdd\x56\xed\x71\x38\x46\x1d\x41\x15\x4c\x8c\xf6\x0d\xac\x27\xaa\x32\xad\xf3\x1c\xe2\xd4\x06\x91\xbd\x2a\x42\x78\x86\xd3\x76\x20\x94\xb3\x31\x35\xca\xb3\xf6\x3a\xfe\xcb\x5e\xee\x4b\x5d\x45\x3f\x2f\x5b\xc5\xc4\x87\x10\x92\x0c\x91\xf6\x58\xdf\x1a\xc3\x5d\xd4\x58\xa3\x3c\xc5\x94\x1c\x27\x12\x02\x46\x83\x72\x84\x48\x5a\x41\xf6\x9c\xe9\xe2\x46\xeb\x0d\x76\xaf\xeb\xd3\xba\x8b\x9f\x12\xcd\xe7\xff\x7d\xf9\xa5\x0a\x47\xfe\xea\x2c\x98\x58\x89\xfa\x0b\x00\x00\xff\xff\xb5\x11\xf7\xee\x7d\x01\x00\x00")

func templateMemGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMemGoTmpl,
		"template/mem.go.tmpl",
	)
}

func templateMemGoTmpl() (*asset, error) {
	bytes, err := templateMemGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/mem.go.tmpl", size: 381, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/context.go.tmpl":  templateContextGoTmpl,
	"template/exports.go.tmpl":  templateExportsGoTmpl,
	"template/func.go.tmpl":     templateFuncGoTmpl,
	"template/imp_func.go.tmpl": templateImp_funcGoTmpl,
	"template/imports.go.tmpl":  templateImportsGoTmpl,
	"template/mem.go.tmpl":      templateMemGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"context.go.tmpl":  &bintree{templateContextGoTmpl, map[string]*bintree{}},
		"exports.go.tmpl":  &bintree{templateExportsGoTmpl, map[string]*bintree{}},
		"func.go.tmpl":     &bintree{templateFuncGoTmpl, map[string]*bintree{}},
		"imp_func.go.tmpl": &bintree{templateImp_funcGoTmpl, map[string]*bintree{}},
		"imports.go.tmpl":  &bintree{templateImportsGoTmpl, map[string]*bintree{}},
		"mem.go.tmpl":      &bintree{templateMemGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
