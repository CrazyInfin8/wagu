// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/context.go.tmpl
// template/exports.go.tmpl
// template/func.go.tmpl
// template/imp_func.go.tmpl
// template/imports.go.tmpl
// template/mem.go.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateContextGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcd\x6e\xe3\x36\x10\x3e\x4b\x4f\x31\x30\x1c\x43\x5c\x38\xca\x36\x31\x7c\x30\xe0\x4b\x37\xdb\x22\x07\xa7\x41\x5b\x5f\x1a\xe4\x40\x4b\x43\x87\x88\x44\xa9\x14\x65\x5b\x51\xf5\xee\xc5\x50\x3f\xb6\xb4\xce\x62\x81\x6c\x4e\xa2\xc8\x99\xf9\x7e\x48\x71\x94\xf2\xe0\x85\x6f\x11\xca\x12\xfc\x87\x97\x2d\x54\x95\xeb\xca\x38\x4d\xb4\x01\xcf\x75\x46\xa8\x75\xa2\xb3\x91\xeb\x8c\x62\x6e\x9e\x47\xae\x53\x96\x97\x20\x05\xf8\xeb\x0c\xd7\x2a\xe3\x02\x29\xc3\x19\x69\x14\x11\x06\x86\x02\x73\x3b\xdd\x84\xa2\x0a\x6d\x40\x9b\xb6\x5a\xf1\xd4\x62\x38\xa3\xad\x34\xcf\xf9\xc6\x0f\x92\xf8\x0a\xc3\x4c\xbf\x8a\xab\x38\xe6\xe9\xe5\x36\xe9\xa7\x32\xd7\x35\x45\x8a\xf0\x25\x51\x06\x0f\x06\x32\xa3\xf3\xc0\x40\xe9\x3a\x2b\x8c\x89\xf6\x49\x59\x2a\x60\xc7\x65\x09\x18\x65\xc4\xed\xf1\x69\x53\x18\xa4\xf7\x21\x13\xff\xce\xca\xc4\xf0\xb7\x5c\x05\x46\x26\x2a\xb3\xeb\x02\x4e\xe7\xb3\x6f\x65\x68\xae\xb6\x08\x63\x39\x85\xf1\x0e\x16\x4b\xaa\xf4\x7b\x94\x6c\x78\x54\xe7\x6f\xcb\x12\xc6\x12\xaa\x8a\xb8\x8d\x77\xf0\x1f\x58\xfa\x6d\x76\x53\xa9\x72\x5d\x91\xab\x00\xee\x71\xdf\x08\xf3\x5a\x29\x67\x79\x0d\x58\x75\x7a\x18\x7c\x6a\x8d\x29\x5d\x27\x20\x3e\x93\x66\xa2\x5c\x61\xbc\x00\x85\xfb\x15\xc6\x89\x2e\x3c\xf6\x5d\x80\x29\x88\x05\x88\xae\xee\x8f\x69\x0d\xfc\xa3\xda\x65\xa7\x77\xc7\xa3\xfc\x1b\xc1\x8e\x46\x93\x6b\x05\x01\x49\x1f\x9e\x06\x6b\x85\x17\x74\x5a\x18\xdc\xca\x2c\x4d\x32\xf4\x18\xd8\x13\x48\xe2\xda\x02\xfe\x0a\x63\x7f\xad\x62\x9e\x7a\xcc\xad\x6c\xad\x66\xaf\xcf\xd4\xf9\x92\xa4\x85\xd7\x37\x29\x24\x21\x9f\x02\xd7\x09\xa9\x12\x2c\x21\xe6\x2f\xe8\xd5\xe7\x64\x0a\x11\x2a\xcf\x42\x30\xe6\x3a\x01\x65\xdb\xb0\x69\x8d\xcb\x3a\x1a\x93\xb0\xdb\xc3\x1e\xe0\x56\x27\x64\xb8\x97\xc9\x57\x04\xa9\x0c\xb3\xfb\xd2\x20\xf1\x34\x45\x15\xd6\xf5\xa7\x7d\x5c\x8a\x67\xbe\xef\x77\x92\x6a\xdb\xdc\x1d\xd7\xf4\x21\x7e\xd5\xfa\x56\xee\x7e\x2d\xfe\x41\x9d\x00\xc0\xb2\xb6\x25\xf3\xef\x71\xef\x8d\x42\xb9\x83\x4d\x01\xaf\xa8\x93\x11\xb3\xb1\x77\xca\xfc\xb1\x43\x2d\xa2\x64\x3f\x88\x95\xca\x40\xd2\x2c\x8d\x18\x7d\x5d\x56\x83\xbc\xb9\xbe\x95\xbb\xbf\xbc\xc3\x14\x0a\xa2\x7d\x73\xcd\xea\x07\xd1\x97\x02\x0a\x58\x2e\xe1\x33\xbd\x38\x29\x57\x32\xf0\x4e\x09\x31\xd7\xa9\x6c\xd4\x81\xa2\xe8\xa2\xf0\x57\x52\xdd\xd9\xf4\xc9\xa4\xce\xbd\xfc\xa5\x9f\x7c\xc2\xb0\x4e\x6f\x7c\x3d\xc0\x15\x14\x9d\xb5\x72\x3e\xeb\xd1\x9a\xcf\x58\xfd\x78\x17\xad\xf9\xec\xbd\xb4\x6e\xae\xff\xc4\xf8\xe3\xdd\x6a\xc0\x3f\xf7\x99\x5c\xf4\x0d\xea\x31\xf9\x28\x83\x7e\x80\x89\x3d\x41\xeb\xf7\x78\xd2\xd4\xb5\x59\x5e\x5e\x3f\x0e\x0c\xae\xa0\x19\x17\x8c\x0d\x4e\xc6\xfa\x3d\xc2\x8f\x70\xf3\x99\x85\x9b\xcf\x8e\x70\xf3\x59\x1f\xce\xee\xf8\x47\xa8\xbb\x78\x43\x5d\x0f\xee\xe7\xa9\xbb\x18\xa8\x2b\x4b\xd8\x4b\xf3\x4c\x37\xfb\xdf\x7c\x13\x21\x5c\x56\x55\xdd\x70\x0d\xbd\x7e\x55\x46\x17\x27\x3d\xb7\xb9\xb9\xc7\x83\xfe\x2f\x80\x68\x7b\x0c\xea\xe6\xef\x3f\x24\x52\x19\xd4\x4d\x07\x68\x6e\x67\x47\x80\x9d\x15\x3c\xc0\x72\xd0\x1d\x54\x1e\x3f\x70\xcd\xe3\x8c\x42\xdc\xe6\xde\xb3\x0c\xe0\xb1\x2c\xe9\x56\x06\x1f\xaa\xea\xe9\x48\xaa\x75\x4a\x49\xe3\xb1\x96\xda\x49\xbf\x42\xdb\xaf\x4e\x5b\xfe\x90\x74\x33\x8d\xff\xc2\x18\xfd\xb6\x17\xde\x85\x74\xe4\x69\xd9\x42\x3d\xb6\xfd\xed\xc9\x3f\x52\xa4\xaf\x62\x20\xed\x7b\xc1\x34\x8b\xfe\x7d\x37\x73\x2e\x5e\xc0\xf2\xbc\x85\x76\x8f\x05\x69\x11\x75\x9d\x13\xa2\x54\xa8\xdd\xe7\x7e\x96\x37\x11\xf5\x29\x18\xfe\xbc\xbc\x45\xb8\xa6\xf9\xa6\x1b\x47\xdb\x4b\xb1\x00\x25\xa3\xea\xf8\x87\xd5\x5f\x3b\xc7\x72\x0a\x9d\x1d\x8b\x33\x6e\x54\x83\xbf\xb3\x33\x63\xea\x89\xed\xf8\xff\x00\x00\x00\xff\xff\xef\x76\x8e\x06\xb2\x0a\x00\x00")

func templateContextGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateContextGoTmpl,
		"template/context.go.tmpl",
	)
}

func templateContextGoTmpl() (*asset, error) {
	bytes, err := templateContextGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/context.go.tmpl", size: 2738, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateExportsGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x41\xaa\xc2\x40\x10\x44\xd7\x7f\x4e\x51\xcb\xe4\xa3\xb9\x84\xb8\x70\x23\x2e\xbc\x40\x33\xf6\xc4\x10\xd3\x86\xc9\x04\x95\xb6\xef\x2e\x33\x81\x80\xb8\x6a\x78\xf5\xaa\x6b\x24\xdf\x53\xcb\x50\x45\x73\xea\x5b\x98\x39\xa7\xba\x45\x24\x69\x19\xcd\x3e\x83\x30\x8b\x47\xe5\xf1\xbf\xbb\x4b\xe2\x67\xaa\x8b\x7d\xa4\x81\xf1\x86\xe4\x63\x56\xa9\x62\xa4\x48\xc3\x84\xe6\x70\x41\x8a\x73\xa6\xb5\x2a\x1e\x5d\xba\x22\x72\x9a\xa3\x9c\x5f\x23\x97\xd8\xac\xbc\x80\x99\x2a\x58\x16\xe0\xfe\x54\xd1\x85\x5f\x77\x01\x58\xd5\x90\xbb\x25\xa9\xfc\x06\xdf\xc3\x81\x6e\x53\x59\x76\xe6\xd6\x82\xfb\x04\x00\x00\xff\xff\xe8\xdb\x90\x63\xe6\x00\x00\x00")

func templateExportsGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateExportsGoTmpl,
		"template/exports.go.tmpl",
	)
}

func templateExportsGoTmpl() (*asset, error) {
	bytes, err := templateExportsGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/exports.go.tmpl", size: 230, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateFuncGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5c\x6d\x8f\xd3\x3a\x16\xfe\x4c\x7f\x85\xa9\x10\x4a\x67\x99\x0c\x9d\xf6\x46\x68\x34\x1d\x69\xc5\xcb\x5e\x24\x58\x10\x0c\x7c\xd8\x2b\x76\xe4\x26\x4e\xc6\x97\xc4\x29\x89\x33\x74\x28\xfd\xef\x57\xb6\xf3\x9e\xd8\x4e\xd2\x4e\xfb\x89\xe0\x38\xe7\x39\xcf\x73\x8e\x8f\x5f\x26\xcd\x0a\xda\xdf\xa1\x87\xc0\x66\x03\xcc\x8f\xdf\x3d\xb0\xdd\x8e\x46\x38\x58\x85\x11\x05\xc6\xe8\xd1\x38\x80\xf4\x76\x9c\xfe\x7b\xb6\xc4\x34\x1e\x8f\x1e\x6d\x36\x00\xbb\xc0\xfc\x12\xa3\x2f\x24\x86\x2e\x02\xdb\xed\x38\xe1\x57\xe3\xcd\x06\x20\x3f\x66\x2d\x88\xd8\xa1\x83\x89\x77\xb6\xc4\x04\x46\xf7\xec\x06\x71\x98\xf5\xc9\x68\xe4\x26\xc4\x06\x2e\x43\x7c\x63\xbe\x65\x8d\x86\x4d\xd7\xe0\xe4\x65\x48\x28\x5a\xd3\xcd\x06\x44\x90\x78\x08\x3c\xf9\xfb\x19\x78\x42\xc1\xc5\x82\xf5\xfb\x8c\x3d\xf3\x23\x8c\x60\x70\x7d\xbf\x42\x31\xd8\x6e\x9f\x01\x7f\xb3\x01\x4f\xfe\x06\xdb\x2d\x73\xfe\x09\x05\xbf\x01\xbd\x5f\x31\xec\x1c\x6c\x32\xda\x6c\x4e\xb9\xb3\xc2\xc0\x9f\x30\xfe\x84\x68\x12\x91\x6b\xd1\x11\x08\x1f\xd8\xad\x52\x7b\xd3\x0e\xd8\x30\xd6\xa7\x99\x5f\x7e\xea\xd3\xbb\xd0\x86\xfe\x57\x18\x31\x77\x46\x8f\xee\x60\x24\x5c\xf2\xcd\xb7\xaf\x32\xaf\x7c\xf3\xfa\x7e\x55\x58\x1c\x3d\xba\x01\x8b\x4a\x2f\x61\x38\xd5\xa6\x0c\x12\xdf\x71\x94\xcf\x14\xda\xdf\x2b\x18\x31\x7b\x3a\xbe\x13\x8f\xa7\xd7\x9f\x13\xd7\xc5\xeb\x0c\x34\xbe\x33\xab\x44\x04\xac\xf2\x41\x99\x1f\xe6\xeb\xf5\x2a\x05\x4f\xb5\x7c\xc2\x9b\x5e\x86\x41\x80\x08\x15\x77\xce\xce\xb8\x92\xff\x85\x41\x2a\xdb\x4f\x4c\x6f\x81\xf9\x0a\x52\x68\x7e\x58\x81\xed\xf6\x82\xdf\x2f\x4b\xda\xc4\xc3\x2e\x40\x3f\x52\x23\xe3\x84\x44\x08\xda\xb7\x70\xe9\xa3\x31\xef\xb1\x82\x04\xdb\x46\xb9\x1d\xa0\x35\xb2\x13\x8a\x9c\xf1\x24\x35\xc6\x32\xaf\x62\x25\xe2\x41\x15\x06\xc4\x75\xd5\xb7\xaf\x30\xca\xb2\xa0\xc5\xb7\x86\x39\x0f\xd1\x1b\x9f\xc5\x7c\x9c\x76\xaa\x9a\x59\x80\xbc\x85\x67\x86\xc2\x52\x5c\x58\x1a\x53\x84\x5a\xad\x66\x36\xca\x76\x05\x92\xca\x3f\xcf\x0f\x97\x72\x07\x6d\xba\x36\xbd\xbc\xf9\x3f\xbc\xef\x5b\x67\xad\xf1\xb4\x6c\x53\x6e\xa1\xbb\x9f\x36\xf4\x0b\x0f\x1b\xe1\x48\xa3\x21\xcc\x89\x80\xb8\xb9\xe1\x37\x09\xb1\xdf\x3a\x6b\x51\x32\xf2\x4a\x21\xee\xf1\xf2\x20\x4a\x43\x3d\xa2\xd2\x0c\x61\xae\xdc\x60\xe2\xe0\x08\xd9\x54\xf8\x84\x5d\x80\x09\x35\x72\xc8\x6b\x96\x6c\xc2\xb5\x09\xb8\x04\xcf\xc1\xef\xdf\x8a\x0e\x57\x0b\xe0\x23\x62\x50\xd6\x36\x61\x75\x23\xcb\x5c\x2a\x72\x96\xd0\xe8\x1e\x84\x09\x05\xa1\x0b\x96\x61\x42\x9c\x98\xa5\x6f\x79\x74\x95\xeb\x2a\xf7\x86\x3f\xf9\x57\x1b\xdc\x37\x93\x24\x41\x4a\x7b\xb1\x00\xa7\x53\x19\x20\x8e\x01\xc1\x7e\x09\x29\xad\xd2\x5a\xfb\x2e\xb3\x4b\xb0\xdf\xdd\x70\x3a\x82\x3a\xfb\xfd\x98\xc7\xd9\x47\xa4\x1e\xc5\x32\x24\x8c\xbc\x84\x95\x1b\x60\x87\x09\xa1\x20\xc0\x71\x00\xa9\x7d\xab\x96\xae\x63\x72\x19\x27\xc6\x09\x9b\x91\x8c\xc6\x04\x54\x72\xa8\x98\x75\x1a\xa9\xd5\x80\x29\x4f\x2e\x95\x9e\x86\x52\x69\x63\x32\x99\x0c\xcf\xea\x1e\x84\x95\x5e\x98\xc6\x81\xb4\x18\xc4\x54\x59\x9e\x63\xe4\x97\x07\x71\x4e\x90\xdb\x9d\x31\x2f\x1e\x2f\xc0\x73\x9e\x56\x62\x09\xc3\x1e\xcd\xa5\x2a\xf5\x9d\x82\xed\x56\x4c\x69\x02\x50\x51\xe8\xf3\xfe\xa3\x47\x5b\xe1\x92\xde\xfc\x79\x4f\xf3\xe7\xc2\xbc\xb4\x84\x85\x24\xa6\xda\x19\xe9\x2b\xf4\x13\xa4\x10\x4f\x2c\xd3\xc6\xf5\xd9\x38\x9b\xc2\xc7\x78\x76\x6e\x42\xc7\x19\x83\x31\xb6\xe6\xe9\x95\x9b\xb7\xb9\x59\x9b\xc6\x8b\x5c\x2e\xf0\xaf\x56\x92\x75\xdf\x2a\xf0\x71\xb2\x4c\xe1\xc5\x95\x9b\xb7\xb9\x59\x5b\x67\xf8\xd3\xfe\xf0\x41\xe2\xa7\xf0\xe2\xca\xcd\xdb\xdc\xac\xad\x33\xfc\x49\x7f\x78\x07\xdf\xdd\xc4\x32\x08\x3c\x3b\x7f\x85\xef\x3e\x1b\x4d\xa8\x67\x2d\x48\x2d\xb3\x61\x01\x65\xcd\x35\x50\xd6\x7c\x5f\x50\x29\xab\x44\xcd\xea\xcb\x1e\x59\xc9\xa1\x38\xab\x7d\x40\xb9\x82\x55\x9a\x16\xfc\xaa\x73\x5a\x9c\xf5\x4f\x8b\x08\x05\xca\xb4\xf8\x84\x82\x7d\xa5\x85\x1a\xca\x9a\xef\x0b\x2a\x65\xa5\x4a\x8b\x4f\x28\xd8\x57\x5a\xa8\xa1\x38\xab\xbd\x40\xb1\x5a\x49\xf2\xfa\x49\xfa\xd4\xca\xa7\xfd\xd3\x22\x8c\x52\x24\x76\xd1\x19\xe8\x77\x7f\xa0\x75\x8e\xb4\xee\x05\xf5\xff\x01\xf5\xff\xb6\x4f\x89\xbd\xbc\x04\x46\x82\x09\x9d\x9d\x1b\x2d\x91\x02\x4f\xc1\x6c\xaa\x4b\x8d\x61\x80\xd6\x5c\x02\x68\xcd\x74\x09\x12\xdf\x46\xf2\x11\xd6\x02\x79\x75\xb5\x07\x8e\xc3\x20\x77\x64\x29\x1f\x71\x9c\x4d\x2b\xa9\xa9\xd8\x60\x75\xe0\xdc\x85\xb4\xca\x03\x6b\xde\xce\xb1\xea\x81\x4a\x02\x6d\x81\x0b\xa9\x34\xb7\x04\xb9\x25\xa6\xb1\xf9\x29\xa4\x90\xa2\x77\xc8\x55\x8b\xf2\xac\xba\x21\x2d\x9c\xd1\x2a\xa1\xf1\xc3\x9a\xd7\xfd\x50\x4a\x33\xd0\x0f\xa1\x87\xb4\x7a\x0c\xd1\xe3\x74\x07\x41\x54\x8e\xf4\x16\x64\x98\x23\xb3\x73\x13\xfd\x48\xeb\x2a\xbf\x70\xb3\x16\x37\x6d\x69\xdd\xe4\xf0\x11\xba\x68\xdb\x3f\x64\xdb\x92\x1a\xa3\x69\x7d\xdb\x52\xbb\xff\xbc\x75\xdf\x51\xf1\x93\xa0\xd4\x4f\x7e\xe1\x66\x2d\x6e\xda\x22\xf7\xf3\xf1\x61\xfd\xf4\x29\xab\x73\xdc\xd3\xf4\xd2\xe5\xad\xa9\xaf\xbe\x6c\xe3\x28\x6a\xfb\xa1\x5d\x4d\x72\x6f\x14\xa5\xf0\xb2\xfd\xa6\x28\x43\x0f\xe3\x9d\x50\xaf\xea\x9d\xa4\x4c\x5e\xb6\xdf\x7c\x48\xef\x98\x76\xa8\x08\x33\x2a\xc2\x9c\xa5\xa4\xaf\x4c\xc9\xcb\x03\xa7\x24\xea\x18\xe7\xc5\x71\x02\x5d\x77\x4f\x16\xe8\xc5\x51\x22\xed\x15\x03\xda\x2b\x06\xb4\x97\x0d\x68\x4f\x39\xa0\xaf\x0e\x1a\x68\xaf\xe3\x80\xbe\x3a\x4a\x9c\x1b\xde\xc9\xd6\x3d\xc7\x09\x73\x31\xa0\xbd\x62\x40\x7b\xd9\x80\xf6\x94\x03\xfa\xea\xb0\x03\xda\xeb\x38\xa0\xaf\x8e\x33\xa0\x1b\xee\xc9\x02\x7d\xf8\x01\xcd\x0f\xd3\x30\x91\xad\xbc\x5c\x3f\x84\x4c\xae\x00\xd2\x5b\xf3\x3d\x26\x06\x6f\x90\xad\xb9\xda\x6f\xea\x97\x5d\xfc\x1c\x4f\xee\x44\x0e\xbe\x9f\x43\xa2\x00\xae\xbb\xd1\x85\xeb\x07\xa4\x2b\x77\x22\x07\xdf\x0f\x5d\x3b\x5c\xdd\xc7\xd8\xeb\x16\xe2\x97\x69\xe7\x87\x23\xae\x73\xa7\xea\x46\x3f\x09\x94\x7f\xa5\x48\xf4\xe7\xec\xb6\xff\xab\xc3\x5e\xe8\x1d\x82\x0e\x26\xde\xff\x50\x14\xc6\xb2\xdd\x50\xa7\x2d\x8f\x1a\x2e\xdb\xf1\x94\xe1\x64\x7b\x9e\x4e\x1b\x1b\x9b\x76\x61\x77\x1d\x41\xec\xef\x87\x9e\x12\x2f\xa3\x57\xc1\xdb\x89\xdf\x2a\x5c\xd9\x44\xfa\x07\x99\x12\xc5\x0f\x04\xc5\x2f\xc3\x44\x7e\xe0\xd1\x89\x9e\x16\x2e\x63\x98\xc3\xed\xc4\x0e\xfd\xf8\x95\xef\x4b\x7f\x49\xa6\xde\x74\x17\xfa\xfc\xe1\xa6\x8a\xf8\x47\x24\xa5\x5c\x29\x24\x9f\x7f\x44\x54\x52\x44\x3a\x95\x09\x15\x50\x01\xd0\x34\xac\x2b\x86\x08\x4b\x8f\x5d\xaa\x85\x10\x61\x7f\x17\xff\x55\x40\x05\x40\x6f\xff\x5d\x3f\x94\x9f\xf6\x56\x08\xbc\x61\x3d\x77\x61\xa0\x84\x2a\x41\xf4\xe6\x40\xa3\x84\xd8\x9d\x38\x5c\xb3\x9e\xbb\x70\x50\x42\x95\x20\x7a\x73\x20\x08\x46\x48\xfe\xd7\xdf\x0a\x8b\x4f\x61\x42\x9c\xeb\xf0\xf5\x1d\x92\x4d\xab\x9d\xb8\x68\x20\x1b\x50\xbd\x39\xc1\xa5\xf4\x3c\xba\xc2\xe7\xdf\xcb\x78\x17\x1e\x0a\x98\xdc\xfc\x80\x78\x78\xf9\xd9\x97\x27\x33\x7f\xda\x30\xab\x29\xf1\x68\x4d\x11\x71\x6e\x92\x33\x3c\x3b\xd7\x9f\x5a\xb7\x4f\x23\xdd\x20\x62\x3d\x44\x2f\x4d\xd8\x8c\xf1\x33\x82\xab\x33\x6c\xcd\xd5\x33\x62\x6f\xb3\x7c\x4c\xdd\xc4\x67\xae\xd2\xe1\xbd\x0c\x61\x9c\x0d\x61\x2d\x9c\x35\xdf\x07\x5c\xce\x2e\xd1\xb3\x4b\x7a\x91\xec\xc6\x52\x07\x5b\x2c\x20\xf6\x01\x5b\x8e\xa5\x2e\x4b\x94\xb5\xb2\x73\x08\x95\x28\x55\x56\x3d\x51\xca\x91\xd3\x71\x69\x46\x6e\x70\x5a\xea\xd0\x5a\x03\xd6\xb7\x66\xce\xce\x4d\x07\x05\x21\x45\x2a\xb0\xac\x42\xf7\xab\x9c\x6c\x19\x1b\x85\xc2\xb6\x3c\xf3\xe4\x19\xa6\xdd\x7a\x92\x3b\x14\xd1\xac\xba\xd5\xdb\xf6\xcd\xa6\x64\x5d\x59\xb2\x33\xeb\x83\x8a\x76\x0d\x45\xcf\x41\xbe\xe4\xd7\xee\x94\x6b\xea\x55\xdb\x34\xc8\xbd\xe3\x55\xb2\xae\x57\x6f\xe8\x94\x57\x43\xd1\x73\x18\xa4\x9e\x78\x93\x05\x13\x8a\xa2\x55\x84\x68\xc7\xa9\xea\x8d\x08\x18\xdb\xb3\x0d\x28\x72\x15\xbc\x4e\x85\xee\x8d\xa0\x38\x00\xcf\xad\xf1\x53\x44\xab\xcc\xcc\x8d\xc2\x80\xa3\x0d\x0e\x5d\x05\x54\x4e\xb2\x4c\xaf\x02\xaa\x8c\xa4\xf2\xf4\xc6\x0f\xa1\xa3\x3e\xbc\x69\xf4\x68\x79\x2d\xb9\xe6\xe7\x89\x71\xc2\x95\x98\x18\xe2\x67\x34\xe6\xc7\x90\xf3\x33\x9e\xda\x74\x6d\xbe\x47\xc1\x5f\xcd\x3f\x22\xd7\xde\xa1\xfc\xe0\xba\x31\xa2\x8c\xc6\xb7\x49\xcb\x6b\xc1\x92\x43\x08\x02\xa3\x7b\xf3\x1d\xa6\xd4\x47\xaf\x89\x83\x21\x31\xbf\x88\x5b\x03\x70\x2f\xbe\xe9\x14\xac\xe4\xe9\x60\x99\xac\xf9\x21\x65\xe2\x87\x27\xed\x32\x59\xf3\x07\x96\xc9\x1d\x9c\x4d\x69\xcd\x3f\x98\x50\xad\xa3\xfb\x68\xe9\xe5\x0e\x4e\xaf\xb4\xda\x1f\x41\xb7\x52\x81\x3a\x5a\xbe\x65\xd5\xeb\x85\xe2\x2d\x4f\x1e\x3e\x4c\xe8\x8b\x21\xbe\x7c\xd3\xce\x5e\x7a\x78\x6b\xfe\x50\xf0\x39\x7b\xcd\xbb\x69\x83\x90\x3b\xf1\xd6\xbc\x92\xb6\x77\xe0\x94\xf1\xd4\x2a\x14\xef\x38\x56\x84\x12\xa2\x20\x4f\xad\x7d\x8d\x97\xae\x13\x17\x07\x95\x8e\x93\xa9\x35\x74\x9c\xf4\x9d\xbf\x86\x09\x67\xcd\x8f\x23\x9c\x18\x39\xc7\x15\xae\xc8\xb8\x64\x68\xc6\x25\x47\x49\xb9\xfd\x6b\xd6\x3f\xd7\x06\x48\x26\x72\xed\x08\x92\x29\xd6\x4d\x07\x93\x6c\x76\xbe\xd3\xf0\xdc\xdf\xfa\xa9\xc7\xf0\x7c\x90\x65\xf9\x00\xe1\x76\xca\xb5\xc3\x2b\x77\x90\xb5\xa6\xfa\xc7\x87\x34\x8c\x90\x7a\x67\x98\x76\x11\x6f\xa0\xb3\xeb\x62\xbb\xdc\xaa\xf2\x20\x35\xeb\x3f\xae\xab\xc8\x09\x54\xef\x1d\xd5\xa4\x6e\x93\xf4\x63\x42\xb5\xaa\xca\x1d\xb8\xf8\xf6\x4c\x01\xdf\x67\x0e\xe1\xea\xbd\x28\x4b\xf9\xa2\xf8\x75\x7a\x6f\x5d\x52\x55\x5e\x68\x44\x91\x3a\x32\xb5\xca\x9e\xb0\xff\xe9\x83\xda\xaf\x1c\x77\x09\xea\xd4\xda\x2d\xa8\xca\xb2\xac\x0f\x6a\x3b\x7c\x9f\xca\xd3\x1c\x41\x12\xed\xfa\x6d\xd0\xba\x68\xd7\xfe\x0e\x51\x77\xed\x94\x8b\x73\xbd\x76\x92\x57\x98\x7a\x1c\x13\x74\xd2\x6e\xc0\xa9\x80\x4e\xbc\xa6\xdb\x07\xa9\x22\x9a\x73\xd2\x7e\xf2\x75\x4d\xbd\x01\x87\x03\x0f\x29\xdf\x0e\x39\xa7\x39\xf6\x95\xca\xa7\x9c\x00\xed\x24\x8a\x10\xa1\x37\x01\x0a\xd4\xfb\x67\x1f\x91\xcc\xf3\x09\x38\x03\xd6\x1f\x7f\xcc\x2c\xe9\xf7\x39\xbc\x28\xfc\xb9\x93\x49\x1e\xcb\xf7\xef\xe1\x8a\x1b\x48\x3f\x27\xc1\xac\xbe\x47\x01\x20\x21\x05\x71\xb2\x5a\x85\x11\x45\x0e\xf8\x79\x8b\x08\x48\x62\x4c\x3c\x10\x04\x70\x05\xee\x11\x1d\xd7\x8b\x00\xff\xfc\x89\x78\xda\x68\x5d\x51\x4c\xc0\x49\x95\x52\x8b\x68\x90\x38\xc0\x28\x9f\x29\x87\xab\xf1\x24\xb5\xf3\x27\x8c\xdf\xc1\x25\xe2\x1f\x8f\xf1\x97\x7e\x6e\x9f\x37\xf2\x2f\xf7\x5c\xc8\xb4\xc2\xae\xe2\x7d\xac\xec\xd3\x07\xed\x8f\xb2\x16\xf1\x70\xf1\x66\x56\x7b\xcf\x65\xfa\x2e\x8e\x17\xd2\x10\xb4\x3b\x28\x7f\xf4\xa6\x93\x8b\x6a\xdb\x2a\xf3\xb4\xf8\x5e\x50\xfc\x13\x53\xfb\xb6\x05\xa5\xf2\x29\x27\x71\xef\x25\x8c\x91\xf8\x90\x91\x0d\x63\xf1\x29\x2c\xf1\x49\x9b\x8b\x9a\x33\x0d\x8e\x69\x70\x1d\xe4\xc2\xc4\xa7\xf5\xee\xdc\xf8\x2b\x71\xaf\x13\x05\x44\x9c\x5c\xa2\xa2\x16\xf5\x4d\x0c\x7d\xc6\x31\x9c\xa5\x1f\xda\xdf\x07\xa4\x5d\xb3\x20\x6c\x47\xff\x04\x00\x00\xff\xff\xa3\x88\x3e\x2f\x45\x4c\x00\x00")

func templateFuncGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateFuncGoTmpl,
		"template/func.go.tmpl",
	)
}

func templateFuncGoTmpl() (*asset, error) {
	bytes, err := templateFuncGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/func.go.tmpl", size: 19525, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateImp_funcGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4a\xc5\x30\x10\x45\xd7\xe6\x2b\xee\xc2\x85\x8a\xa6\x7b\xb7\x4a\xa1\x0b\x41\xc4\x1f\x08\xc9\xa4\x96\xb6\x69\x89\x29\x56\x86\xf9\x77\xc9\x14\x2a\xef\xed\x26\x73\xcf\xcd\x61\x56\xe7\x47\xd7\x13\x98\x61\xdf\xc7\x1e\x22\xc6\x30\x3f\xe1\x67\x28\x5f\xb0\xdd\xbc\x2e\xb9\x50\x68\xb7\xe4\x6b\xd4\x34\x98\x97\xb0\x4d\xf4\xac\x85\x37\x9d\x21\xf2\x88\x38\xd0\x14\x8e\x6d\x5b\xc7\x4a\xc7\xda\x8a\xcc\xb8\xb5\xdd\x2b\x44\xee\x7c\xd9\xf1\xf0\xb2\xa4\x42\x7b\x51\xa1\xcb\x6e\xfe\xfc\x5d\xe9\x1b\x22\xf7\xff\xda\x0f\x2a\x5b\x4e\x35\x80\x88\xfe\x09\x11\x66\x50\x0a\xba\x30\x37\xcc\x18\xe2\x15\x98\xf5\x81\x93\xf3\x65\xb7\xd1\xb6\x97\xfe\x53\xab\x4a\x23\x7a\xec\xc1\x9b\xbf\x00\x00\x00\xff\xff\x8a\x00\x9a\xf0\x0c\x01\x00\x00")

func templateImp_funcGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateImp_funcGoTmpl,
		"template/imp_func.go.tmpl",
	)
}

func templateImp_funcGoTmpl() (*asset, error) {
	bytes, err := templateImp_funcGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/imp_func.go.tmpl", size: 268, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateImportsGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xcd\x4a\xc5\x30\x10\x85\xd7\xe6\x29\xce\xa2\x0b\x95\x6b\xef\xbe\xe0\x4a\x28\xb8\x10\x8a\xf8\x02\x21\x9d\xd4\xd0\x36\x0d\x71\x8a\x2d\xc3\xbc\xbb\x24\xea\xe2\xee\xe6\xfc\xcc\xc7\x4c\xb2\x6e\xb6\x13\x41\x04\xed\x30\x4f\x50\x35\x86\xcf\x44\x78\x5d\xd3\x96\x99\xc6\x7e\x8f\xee\x0b\x21\x32\x65\x6f\x1d\x41\x8c\xc8\x13\xb2\x8d\x13\xa1\x09\x17\x34\x1e\xdd\x33\xda\xdb\xba\xaa\xb9\xbb\x5e\xb1\x6e\xe3\xbe\x50\x57\xe0\x8d\x6f\xdf\xaa\x82\xea\x05\x3e\xd0\x32\xfe\xfb\x7d\x11\x75\xa5\x2f\x46\x80\xea\xbd\xe3\x03\x8f\x2f\x5b\x64\x3a\xf8\xb7\x35\xd8\x6c\xd7\x8f\x33\x51\xa1\x3f\x88\xe0\x3b\xf0\x67\x09\xde\x89\xf7\x1c\x4b\x02\xd5\xfa\x07\x54\x45\x40\xb1\x42\xcb\xb5\x7f\xa3\x9a\x9f\x00\x00\x00\xff\xff\x1b\xcd\xf2\x7f\xee\x00\x00\x00")

func templateImportsGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateImportsGoTmpl,
		"template/imports.go.tmpl",
	)
}

func templateImportsGoTmpl() (*asset, error) {
	bytes, err := templateImportsGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/imports.go.tmpl", size: 238, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMemGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\xbd\x6e\xea\x30\x18\x9d\x93\xa7\xf8\x6e\x94\x2b\x25\x52\x48\x98\x91\x18\xb8\xba\x6b\xa0\xa2\x43\x07\xc4\x60\xc2\x67\xd7\x02\xff\xc8\x31\x6a\xc0\xf2\xbb\x57\xb6\xd3\x01\xba\xd9\xc7\xe7\xcf\x47\x93\xe1\x42\x18\x82\x73\xd0\xbe\x5d\x18\x78\x9f\x3b\xb7\x00\x4e\xa1\xed\x7b\xa2\xc3\x3d\xe7\x42\x2b\x63\xa1\x60\xdc\x7e\xde\x4e\xed\xa0\x44\x87\xe7\xd1\x3c\x68\x27\x04\xd1\x0b\xa6\x8a\xa8\x41\x79\x8e\xf4\xae\x83\x9e\x4c\xa0\x28\x1d\xd1\xae\xa2\x73\x4f\xa6\x1d\xa5\xe1\xb5\xeb\xe0\x9d\x3f\x10\x88\x05\xf1\x42\x0a\xf8\xc6\x3e\x53\x91\x09\x94\x16\x4e\x77\x8b\xe3\xcc\x4a\xd0\xbf\x80\xc4\x38\x7a\x93\x03\x48\xfc\xea\x51\x28\x73\xaf\x6a\x38\x1c\x03\x1d\x5c\x9e\xbd\xfe\x24\x13\x28\x1a\x40\x63\x60\xb5\x86\xd0\xbd\xed\x89\xde\x23\xe3\x4a\x56\x92\x5f\x9b\xd4\x15\x45\xac\x02\xde\x37\x89\xb4\xff\xff\xb1\x9f\x8f\x9b\xed\x6e\xdb\xc0\xb2\xce\x33\x4e\xa3\xd1\x9f\x35\x48\x7e\x0d\x61\x99\x26\x92\x0f\x15\x1a\x53\xe7\x99\x4f\xe1\x78\x1d\xf1\x27\x38\x66\x92\x0b\x56\xa9\xdf\xaf\xb0\x7a\x96\xa4\x15\xe3\xd9\x10\xc9\x10\x4a\x45\x69\x03\xe5\x99\x58\x12\x3c\x92\x26\xad\x10\x17\xc8\x06\xa5\xef\x95\x40\x71\x70\x2e\x92\xc1\xfb\xd5\xb1\x99\x77\x70\x4f\x56\xbc\x81\xf2\x14\x5c\x92\x9d\xf7\xce\x85\x85\x4a\x1e\x7f\xeb\xdc\x1c\xef\x1c\x68\xc3\xa5\xa5\x50\x2c\xa7\xbf\x53\x11\x44\x11\x4d\xcf\xaf\x5d\x0d\xda\x9b\x91\x20\x50\xe4\x3e\xff\x0e\x00\x00\xff\xff\x55\x2a\xe8\xae\x52\x02\x00\x00")

func templateMemGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMemGoTmpl,
		"template/mem.go.tmpl",
	)
}

func templateMemGoTmpl() (*asset, error) {
	bytes, err := templateMemGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/mem.go.tmpl", size: 594, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/context.go.tmpl":  templateContextGoTmpl,
	"template/exports.go.tmpl":  templateExportsGoTmpl,
	"template/func.go.tmpl":     templateFuncGoTmpl,
	"template/imp_func.go.tmpl": templateImp_funcGoTmpl,
	"template/imports.go.tmpl":  templateImportsGoTmpl,
	"template/mem.go.tmpl":      templateMemGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"context.go.tmpl":  &bintree{templateContextGoTmpl, map[string]*bintree{}},
		"exports.go.tmpl":  &bintree{templateExportsGoTmpl, map[string]*bintree{}},
		"func.go.tmpl":     &bintree{templateFuncGoTmpl, map[string]*bintree{}},
		"imp_func.go.tmpl": &bintree{templateImp_funcGoTmpl, map[string]*bintree{}},
		"imports.go.tmpl":  &bintree{templateImportsGoTmpl, map[string]*bintree{}},
		"mem.go.tmpl":      &bintree{templateMemGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
