package {{ .Pkg }}

import (
	"errors"
	"math"
	{{- if .UseUnsafe }}
	"reflect"
	"unsafe"
	{{- end }}
	{{- if .MMap }}

	"github.com/edsrzf/mmap-go"
	{{- end }}
)

type Context struct {
	Mem {{ if .MMap }}mmap.MMap{{ else }}[]byte{{ end }}
	{{- if .M.ImportedFunctions }}
	f ImportedFuncs
	{{- end }}
	{{- range $i, $v := .M.Globals }}
	G{{ $i }} {{ $v | type }}
	{{- end }}
}

func NewContext({{ if .M.ImportedFunctions }}f ImportedFuncs{{ end }}) *Context {
	c := &Context{Mem: newMemory(){{ if .M.ImportedFunctions }}, f: f{{ end }}}
	{{- range $i, $v := .M.Globals }}
	c.G{{ $i }} = {{ $v | value }}
	{{- end }}
	return c
}

{{- if .MMap }}
func (c *Context) Dispose() error {
	return c.Mem.Unmap()
}
{{- else }}
func (c *Context) Copy() *Context {
	d := *c
	d.Mem = make([]byte, len(c.Mem))
	copy(d.Mem, c.Mem)
	return &d
}

func (c *Context) growMem(size int) {
	c.Mem = append(c.Mem, make([]byte, size)...)
}
{{- end }}

var (
	ErrDivByZero   = errors.New("div by zero")
	ErrIntOverflow = errors.New("int overflow")
)

func i32DivS(x, y int32) int32 {
	if y == 0 {
		panic(ErrDivByZero)
	}
	if x == math.MinInt32 && y == -1 {
		panic(ErrIntOverflow)
	}
	return x / y
}

func i64DivS(x, y int64) int64 {
	if y == 0 {
		panic(ErrDivByZero)
	}
	if x == math.MinInt64 && y == -1 {
		panic(ErrIntOverflow)
	}
	return x / y
}

func i32RemS(x, y int32) int32 {
	if y == 0 {
		panic(ErrDivByZero)
	}
	if x == math.MinInt32 && y == -1 {
		return 0
	}
	return x % y
}

func i64RemS(x, y int64) int64 {
	if y == 0 {
		panic(ErrDivByZero)
	}
	if x == math.MinInt64 && y == -1 {
		return 0
	}
	return x % y
}

func i32DivU(x, y int32) int32 {
	if y == 0 {
		panic(ErrDivByZero)
	}
	return int32(uint32(x) / uint32(y))
}

func i64DivU(x, y int64) int64 {
	if y == 0 {
		panic(ErrDivByZero)
	}
	return int64(uint64(x) / uint64(y))
}

func i32RemU(x, y int32) int32 {
	if y == 0 {
		panic(ErrDivByZero)
	}
	return int32(uint32(x) % uint32(y))
}

func i64RemU(x, y int64) int64 {
	if y == 0 {
		panic(ErrDivByZero)
	}
	return int64(uint64(x) % uint64(y))
}

{{ with .M.Table -}}
type tableEntry struct {
	{{- if $.UseUnsafe }}
	f func() unsafe.Pointer
	{{- else }}
	f interface{}
	{{- end }}
	numParams int
}

var table [{{ len . }}]tableEntry

func init() {
	{{- range $i, $e := . }}
	{{- if $.UseUnsafe }}
	{{- if eq $e.FunctionId -1 }}
	table[{{ $i }}].numParams = -1
	{{- else }}
	table[{{ $i }}].numParams = {{ $e.NumParams }}
	table[{{ $i }}].f = func() unsafe.Pointer {
		f := f{{ $e.FunctionId }}
		return unsafe.Pointer(&f)
	}
	{{- end }}
	{{- else }}
	table[{{ $i }}] = {{ if eq $e.FunctionId -1 }}tableEntry{f: nil}{{ else }}tableEntry{f: f{{ $e.FunctionId }}, numParams: {{ $e.NumParams }}}{{ end }}
	{{- end }}
	{{- end }}
}
{{ end }}
