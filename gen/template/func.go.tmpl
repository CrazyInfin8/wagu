package {{ .Pkg }}

import (
	"math"
	"math/bits"
	{{ if .UseUnsafe }}"unsafe"{{ else }}encoding/binary{{ end }}
)

func f{{ .F.Id }}(ctx *Context{{ range $j, $t := .F.Sig.ParamTypes }}, l{{ $j }} {{ $t | type }}{{ end }})
{{- if .F.Sig.HasReturnType }} {{ .F.Sig.ReturnType | type }}{{ end }} {
	{{- range $l := .F.LocalVars }}
	var l{{ $l.ID }} {{ $l.Typ | type }}
	_ = l{{ $l.ID }}
	{{- end }}
	{{- range $sv := .StackVars }}
	var s{{ $sv.ID }}{{ $sv.Suffix }} {{ $sv.Type | type }}
	_ = s{{ $sv.ID }}{{ $sv.Suffix }}
	{{- end }}
	{{- range .Exprs }}
	{{- if $.ExprComments }}
	// {{ .Name }}{{ with .Data.Op }}: {{ . }}{{ end }}
	{{- end }}
	{{- if eq .Name "unreachable" }}
	panic("unreachable executed")
	{{- else if eq .Name "return" }}
	return{{ with .Data.Var }} {{ . }}{{ end }}
	{{- else if eq .Name "get_local" }}
	{{ .Data.Var }} = {{ .Data.Local }}
	{{- else if eq .Name "set_local" "tee_local" }}
	{{ .Data.Local }} = {{ .Data.Var }}
	{{- else if eq .Name "get_global" }}
	{{ .Data.Var }} = ctx.g{{ .Data.GlobalIdx }}
	{{- else if eq .Name "set_global" }}
	ctx.g{{ .Data.GlobalIdx }} = {{ .Data.Var }}
	{{- else if eq .Name "call" }}
	{{ with .Data.Var }}{{ . }} = {{ end }}f{{ .Data.FuncIdx}}(ctx{{ range .Data.Params }}, {{ . }}{{ end }})
	{{- else if eq .Name "call_indirect" }}
	if int({{ .Data.TableVar }}) < 0 || int({{ .Data.TableVar }}) >= len(table) {
		panic("table entry out of bounds")
	}
	{{- if $.UseUnsafe }}
	if table[{{ .Data.TableVar }}].numParams == -1 {
		panic("table entry is nil")
	}
	{{- else }}
	if table[{{ .Data.TableVar }}].f == nil {
		panic("table entry is nil")
	}
	{{- end }}
	if table[{{ .Data.TableVar }}].numParams != {{ len .Data.Params }} {
		panic("argument count mismatch")
	}
	{{- if $.UseUnsafe }}
	{{ with .Data.Var }}{{ . }} = {{ end }}(*(*func(*Context{{ range .Data.ParamTypes }}, {{ . }}{{ end }}){{ with .Data.VarType }} {{ . }}{{ end }})(table[{{ .Data.TableVar }}].f()))(ctx{{ range .Data.Params }}, {{ . }}{{ end }})
	{{- else }}
	{{ with .Data.Var }}{{ . }} = {{ end }}table[{{ .Data.TableVar }}].f.(func(*Context{{ range .Data.ParamTypes }}, {{ . }}{{ end }}){{ with .Data.VarType }} {{ . }}{{ end }})(ctx{{ range .Data.Params }}, {{ . }}{{ end }})
	{{- end }}
	{{- else if eq .Name "select" }}
	if {{ .Data.Param3 }} != 0 {
		{{ if eq .Data.Var .Data.Param1 }}// {{ end }}{{ .Data.Var }} = {{ .Data.Param1 }}
	} else {
		{{ if eq .Data.Var .Data.Param2 }}// {{ end }}{{ .Data.Var }} = {{ .Data.Param2 }}
	}
	{{- else if eq .Name "const" }}
	{{ .Data.Var }} = {{ .Data.Value }}
	{{- else if eq .Name "binary" }}
	{{- if eq .Data.Op "i32.add" "i64.add" "f32.add" "f64.add" }}
	{{ .Data.Var }} = {{ .Data.Param1 }} + {{ .Data.Param2 }}
	{{- else if eq .Data.Op "i32.sub" "i64.sub" "f32.sub" "f64.sub" }}
	{{ .Data.Var }} = {{ .Data.Param1 }} - {{ .Data.Param2 }}
	{{- else if eq .Data.Op "i32.mul" "i64.mul" "f32.mul" "f64.mul" }}
	{{ .Data.Var }} = {{ .Data.Param1 }} * {{ .Data.Param2 }}
	{{- else if eq .Data.Op "i32.div_s" }}
	{{ .Data.Var }} = i32DivS({{ .Data.Param1 }}, {{ .Data.Param2 }})
	{{- else if eq .Data.Op "i64.div_s" }}
	{{ .Data.Var }} = i64DivS({{ .Data.Param1 }}, {{ .Data.Param2 }})
	{{- else if eq .Data.Op "i32.div_u" }}
	{{ .Data.Var }} = i32DivU({{ .Data.Param1 }}, {{ .Data.Param2 }})
	{{- else if eq .Data.Op "i64.div_u" }}
	{{ .Data.Var }} = i64DivU({{ .Data.Param1 }}, {{ .Data.Param2 }})
	{{- else if eq .Data.Op "f32.div" "f64.div" }}
	{{ .Data.Var }} = {{ .Data.Param1 }} / {{ .Data.Param2 }}
	{{- else if eq .Data.Op "i32.rem_s" }}
	{{ .Data.Var }} = i32RemS({{ .Data.Param1 }}, {{ .Data.Param2 }})
	{{- else if eq .Data.Op "i64.rem_s" }}
	{{ .Data.Var }} = i64RemS({{ .Data.Param1 }}, {{ .Data.Param2 }})
	{{- else if eq .Data.Op "i32.rem_u" }}
	{{ .Data.Var }} = i32RemU({{ .Data.Param1 }}, {{ .Data.Param2 }})
	{{- else if eq .Data.Op "i64.rem_u" }}
	{{ .Data.Var }} = i64RemU({{ .Data.Param1 }}, {{ .Data.Param2 }})
	{{- else if eq .Data.Op "i32.and" "i64.and" }}
	{{ .Data.Var }} = {{ .Data.Param1 }} & {{ .Data.Param2 }}
	{{- else if eq .Data.Op "i32.or" "i64.or" }}
	{{ .Data.Var }} = {{ .Data.Param1 }} | {{ .Data.Param2 }}
	{{- else if eq .Data.Op "i32.xor" "i64.xor" }}
	{{ .Data.Var }} = {{ .Data.Param1 }} ^ {{ .Data.Param2 }}
	{{- else if eq .Data.Op "i32.shl" }}
	{{ .Data.Var }} = {{ .Data.Param1 }} << (uint32({{ .Data.Param2 }}) & 31)
	{{- else if eq .Data.Op "i64.shl" }}
	{{ .Data.Var }} = {{ .Data.Param1 }} << (uint64({{ .Data.Param2 }}) & 63)
	{{- else if eq .Data.Op "i32.shr_s" }}
	{{ .Data.Var }} = {{ .Data.Param1 }} >> (uint32({{ .Data.Param2 }}) & 31)
	{{- else if eq .Data.Op "i64.shr_s" }}
	{{ .Data.Var }} = {{ .Data.Param1 }} >> (uint64({{ .Data.Param2 }}) & 63)
	{{- else if eq .Data.Op "i32.shr_u" }}
	{{ .Data.Var }} = int32(uint32({{ .Data.Param1 }}) >> (uint32({{ .Data.Param2 }}) & 31))
	{{- else if eq .Data.Op "i64.shr_u" }}
	{{ .Data.Var }} = int64(uint64({{ .Data.Param1 }}) >> (uint64({{ .Data.Param2 }}) & 63))
	{{- else if eq .Data.Op "i32.rotl" }}
	{{ .Data.Var }} = int32(bits.RotateLeft32(uint32({{ .Data.Param1 }}), int({{ .Data.Param2 }})))
	{{- else if eq .Data.Op "i64.rotl" }}
	{{ .Data.Var }} = int64(bits.RotateLeft64(uint64({{ .Data.Param1 }}), int({{ .Data.Param2 }})))
	{{- else if eq .Data.Op "i32.rotr" }}
	{{ .Data.Var }} = int32(bits.RotateLeft32(uint32({{ .Data.Param1 }}), -int({{ .Data.Param2 }})))
	{{- else if eq .Data.Op "i64.rotr" }}
	{{ .Data.Var }} = int64(bits.RotateLeft64(uint64({{ .Data.Param1 }}), -int({{ .Data.Param2 }})))
	{{- else if eq .Data.Op "i32.eq" "i64.eq" "f32.eq" "f64.eq" }}
	if {{ .Data.Param1 }} == {{ .Data.Param2 }} {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i32.ne" "i64.ne" "f32.ne" "f64.ne" }}
	if {{ .Data.Param1 }} != {{ .Data.Param2 }} {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i32.lt_s" "i64.lt_s" "f32.lt" "f64.lt" }}
	if {{ .Data.Param1 }} < {{ .Data.Param2 }} {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i32.lt_u" }}
	if uint32({{ .Data.Param1 }}) < uint32({{ .Data.Param2 }}) {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i64.lt_u" }}
	if uint64({{ .Data.Param1 }}) < uint64({{ .Data.Param2 }}) {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i32.le_s" "i64.le_s" "f32.le" "f64.le" }}
	if {{ .Data.Param1 }} <= {{ .Data.Param2 }} {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i32.le_u" }}
	if uint32({{ .Data.Param1 }}) <= uint32({{ .Data.Param2 }}) {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i64.le_u" }}
	if uint64({{ .Data.Param1 }}) <= uint64({{ .Data.Param2 }}) {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i32.gt_s" "i64.gt_s" "f32.gt" "f64.gt" }}
	if {{ .Data.Param1 }} > {{ .Data.Param2 }} {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i32.gt_u" }}
	if uint32({{ .Data.Param1 }}) > uint32({{ .Data.Param2 }}) {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i64.gt_u" }}
	if uint64({{ .Data.Param1 }}) > uint64({{ .Data.Param2 }}) {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i32.ge_s" "i64.ge_s" "f32.ge" "f64.ge" }}
	if {{ .Data.Param1 }} >= {{ .Data.Param2 }} {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i32.ge_u" }}
	if uint32({{ .Data.Param1 }}) >= uint32({{ .Data.Param2 }}) {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "i64.ge_u" }}
	if uint64({{ .Data.Param1 }}) >= uint64({{ .Data.Param2 }}) {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "f32.min" }}
	{{ .Data.Var }} = float32(math.Min(float64({{ .Data.Param1 }}), float64({{ .Data.Param2 }})))
	{{- else if eq .Data.Op "f64.min" }}
	{{ .Data.Var }} = math.Min({{ .Data.Param1 }}, {{ .Data.Param2 }})
	{{- else if eq .Data.Op "f32.max" }}
	{{ .Data.Var }} = float32(math.Max(float64({{ .Data.Param1 }}), float64({{ .Data.Param2 }})))
	{{- else if eq .Data.Op "f64.max" }}
	{{ .Data.Var }} = math.Max({{ .Data.Param1 }}, {{ .Data.Param2 }})
	{{- else if eq .Data.Op "f32.copysign" }}
	{{ .Data.Var }} = float32(math.Copysign(float64({{ .Data.Param1 }}), float64({{ .Data.Param2 }})))
	{{- else if eq .Data.Op "f64.copysign" }}
	{{ .Data.Var }} = math.Copysign({{ .Data.Param1 }}, {{ .Data.Param2 }})
	{{- end }}
	{{- else if eq .Name "unary" }}
	{{- if eq .Data.Op "i32.clz" }}
	{{ .Data.Var }} = int32(bits.LeadingZeros32(uint32({{ .Data.Param }})))
	{{- else if eq .Data.Op "i64.clz" }}
	{{ .Data.Var }} = int64(bits.LeadingZeros64(uint64({{ .Data.Param }})))
	{{- else if eq .Data.Op "i32.ctz" }}
	{{ .Data.Var }} = int32(bits.TrailingZeros32(uint32({{ .Data.Param }})))
	{{- else if eq .Data.Op "i64.ctz" }}
	{{ .Data.Var }} = int64(bits.TrailingZeros64(uint64({{ .Data.Param }})))
	{{- else if eq .Data.Op "i32.popcnt" }}
	{{ .Data.Var }} = int32(bits.OnesCount32(uint32({{ .Data.Param }})))
	{{- else if eq .Data.Op "i64.popcnt" }}
	{{ .Data.Var }} = int64(bits.OnesCount64(uint64({{ .Data.Param }})))
	{{- else if eq .Data.Op "i32.eqz" "i64.eqz" }}
	if {{ .Data.Param }} == 0 {
		{{ .Data.Var }} = 1
	} else {
		{{ .Data.Var }} = 0
	}
	{{- else if eq .Data.Op "f32.sqrt" }}
	{{ .Data.Var }} = float32(math.Sqrt(float64({{ .Data.Param }})))
	{{- else if eq .Data.Op "f64.sqrt" }}
	{{ .Data.Var }} = math.Sqrt({{ .Data.Param }})
	{{- else if eq .Data.Op "f32.ceil" }}
	{{ .Data.Var }} = float32(math.Ceil(float64({{ .Data.Param }})))
	{{- else if eq .Data.Op "f64.ceil" }}
	{{ .Data.Var }} = math.Ceil({{ .Data.Param }})
	{{- else if eq .Data.Op "f32.floor" }}
	{{ .Data.Var }} = float32(math.Floor(float64({{ .Data.Param }})))
	{{- else if eq .Data.Op "f64.floor" }}
	{{ .Data.Var }} = math.Floor({{ .Data.Param }})
	{{- else if eq .Data.Op "f32.trunc" }}
	{{ .Data.Var }} = float32(math.Trunc(float64({{ .Data.Param }})))
	{{- else if eq .Data.Op "f64.trunc" }}
	{{ .Data.Var }} = math.Trunc({{ .Data.Param }})
	{{- else if eq .Data.Op "f32.nearest" }}
	{{ .Data.Var }} = float32(math.RoundToEven(float64({{ .Data.Param }})))
	{{- else if eq .Data.Op "f64.nearest" }}
	{{ .Data.Var }} = math.RoundToEven({{ .Data.Param }})
	{{- else if eq .Data.Op "f32.abs" }}
	{{ .Data.Var }} = float32(math.Abs(float64({{ .Data.Param }})))
	{{- else if eq .Data.Op "f64.abs" }}
	{{ .Data.Var }} = math.Abs({{ .Data.Param }})
	{{- else if eq .Data.Op "f32.neg" "f64.neg" }}
	{{ .Data.Var }} = -{{ .Data.Param }}
	{{- else if eq .Data.Op "i64.extend_u/i32" }}
	{{ .Data.Var }} = int64(uint32({{ .Data.Param }}))
	{{- else if eq .Data.Op "i64.extend_s/i32" }}
	{{ .Data.Var }} = int64({{ .Data.Param }})
	{{- else if eq .Data.Op "i32.wrap/i64" }}
	{{ .Data.Var }} = int32({{ .Data.Param }})
	{{- else if eq .Data.Op "i32.trunc_s/f32" }}
	{{ .Data.Var }} = int32(math.Trunc(float64({{ .Data.Param }})))
	{{- else if eq .Data.Op "i64.trunc_s/f32" }}
	{{ .Data.Var }} = int64(math.Trunc(float64({{ .Data.Param }})))
	{{- else if eq .Data.Op "i32.trunc_u/f32" }}
	{{ .Data.Var }} = int32(uint32(math.Trunc(float64({{ .Data.Param }}))))
	{{- else if eq .Data.Op "i64.trunc_u/f32" }}
	{{ .Data.Var }} = int64(uint64(math.Trunc(float64({{ .Data.Param }}))))
	{{- else if eq .Data.Op "i32.trunc_s/f64" }}
	{{ .Data.Var }} = int32(math.Trunc({{ .Data.Param }}))
	{{- else if eq .Data.Op "i64.trunc_s/f64" }}
	{{ .Data.Var }} = int64(math.Trunc({{ .Data.Param }}))
	{{- else if eq .Data.Op "i32.trunc_u/f64" }}
	{{ .Data.Var }} = int32(uint32(math.Trunc({{ .Data.Param }})))
	{{- else if eq .Data.Op "i64.trunc_u/f64" }}
	{{ .Data.Var }} = int64(uint64(math.Trunc({{ .Data.Param }})))
	{{- else if eq .Data.Op "f32.demote/f64" }}
	{{ .Data.Var }} = float32({{ .Data.Param }})
	{{- else if eq .Data.Op "f64.promote/f32" }}
	{{ .Data.Var }} = float64({{ .Data.Param }})
	{{- else if eq .Data.Op "f32.convert_s/i32" "f32.convert_s/i64" }}
	{{ .Data.Var }} = float32({{ .Data.Param }})
	{{- else if eq .Data.Op "f32.convert_u/i32" }}
	{{ .Data.Var }} = float32(uint32({{ .Data.Param }}))
	{{- else if eq .Data.Op "f32.convert_u/i64" }}
	{{ .Data.Var }} = float32(uint64({{ .Data.Param }}))
	{{- else if eq .Data.Op "f64.convert_s/i32" "f64.convert_s/i64" }}
	{{ .Data.Var }} = float64({{ .Data.Param }})
	{{- else if eq .Data.Op "f64.convert_u/i32" }}
	{{ .Data.Var }} = float64(uint32({{ .Data.Param }}))
	{{- else if eq .Data.Op "f64.convert_u/i64" }}
	{{ .Data.Var }} = float64(uint64({{ .Data.Param }}))
	{{- else if eq .Data.Op "i32.reinterpret/f32" }}
	{{ .Data.Var }} = int32(math.Float32bits({{ .Data.Param }}))
	{{- else if eq .Data.Op "i64.reinterpret/f64" }}
	{{ .Data.Var }} = int64(math.Float64bits({{ .Data.Param }}))
	{{- else if eq .Data.Op "f32.reinterpret/i32" }}
	{{ .Data.Var }} = math.Float32frombits(uint32({{ .Data.Param }}))
	{{- else if eq .Data.Op "f64.reinterpret/i64" }}
	{{ .Data.Var }} = math.Float64frombits(uint64({{ .Data.Param }}))
	{{- end }}
	{{- else if eq .Name "load" }}
	{{- if eq .Data.Op "i32.load" }}
	{{- if $.UseUnsafe }}
	{{ .Data.Var }} = *(*int32)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})]))
	{{- else }}
	{{ .Data.Var }} = int32(binary.LittleEndian.Uint32(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }}):]))
	{{- end }}
	{{- else if eq .Data.Op "i64.load" }}
	{{- if $.UseUnsafe }}
	{{ .Data.Var }} = *(*int64)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})]))
	{{- else }}
	{{ .Data.Var }} = int64(binary.LittleEndian.Uint64(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }}):]))
	{{- end }}
	{{- else if eq .Data.Op "f32.load" }}
	{{- if $.UseUnsafe }}
	{{ .Data.Var }} = *(*float32)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})]))
	{{- else }}
	{{ .Data.Var }} = math.Float32frombits(binary.LittleEndian.Uint32(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }}):]))
	{{- end }}
	{{- else if eq .Data.Op "f64.load" }}
	{{- if $.UseUnsafe }}
	{{ .Data.Var }} = *(*float64)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})]))
	{{- else }}
	{{ .Data.Var }} = math.Float64frombits(binary.LittleEndian.Uint64(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }}):]))
	{{- end }}
	{{- else if eq .Data.Op "i32.load8_s" }}
	{{ .Data.Var }} = int32(int8(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})]))
	{{- else if eq .Data.Op "i64.load8_s" }}
	{{ .Data.Var }} = int64(int8(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})]))
	{{- else if eq .Data.Op "i32.load8_u" }}
	{{ .Data.Var }} = int32(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})])
	{{- else if eq .Data.Op "i64.load8_u" }}
	{{ .Data.Var }} = int64(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})])
	{{- else if eq .Data.Op "i32.load16_s" }}
	{{- if $.UseUnsafe }}
	{{ .Data.Var }} = int32(*(*int16)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})])))
	{{- else }}
	{{ .Data.Var }} = int32(int16(binary.LittleEndian.Uint16(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }}):])))
	{{- end }}
	{{- else if eq .Data.Op "i64.load16_s" }}
	{{- if $.UseUnsafe }}
	{{ .Data.Var }} = int64(*(*int16)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})])))
	{{- else }}
	{{ .Data.Var }} = int64(int16(binary.LittleEndian.Uint16(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }}):])))
	{{- end }}
	{{- else if eq .Data.Op "i32.load16_u" }}
	{{- if $.UseUnsafe }}
	{{ .Data.Var }} = int32(*(*uint16)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})])))
	{{- else }}
	{{ .Data.Var }} = int32(binary.LittleEndian.Uint16(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }}):]))
	{{- end }}
	{{- else if eq .Data.Op "i64.load16_u" }}
	{{- if $.UseUnsafe }}
	{{ .Data.Var }} = int64(*(*uint16)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})])))
	{{- else }}
	{{ .Data.Var }} = int64(binary.LittleEndian.Uint16(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }}):]))
	{{- end }}
	{{- else if eq .Data.Op "i64.load32_s" }}
	{{- if $.UseUnsafe }}
	{{ .Data.Var }} = int64(*(*int32)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})])))
	{{- else }}
	{{ .Data.Var }} = int64(int32(binary.LittleEndian.Uint32(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }}):])))
	{{- end }}
	{{- else if eq .Data.Op "i64.load32_u" }}
	{{- if $.UseUnsafe }}
	{{ .Data.Var }} = int64(*(*uint32)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }})])))
	{{- else }}
	{{ .Data.Var }} = int64(binary.LittleEndian.Uint32(ctx.Mem[int({{ .Data.Param }} + {{ .Data.Offset }}):]))
	{{- end }}
	{{- end }}
	{{- else if eq .Name "store" }}
	{{- if eq .Data.Op "i32.store" "i64.store32" }}
	{{- if $.UseUnsafe }}
	*(*uint32)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param1 }} + {{ .Data.Offset }})])) = uint32({{ .Data.Param2 }})
	{{- else }}
	binary.LittleEndian.PutUint32(ctx.Mem[int({{ .Data.Param1 }} + {{ .Data.Offset }}):], uint32({{ .Data.Param2 }}))
	{{- end }}
	{{- else if eq .Data.Op "i32.store8" "i64.store8" }}
	ctx.Mem[int({{ .Data.Param1 }} + {{ .Data.Offset }})] = uint8({{ .Data.Param2 }})
	{{- else if eq .Data.Op "i32.store16" "i64.store16" }}
	{{- if $.UseUnsafe }}
	*(*uint16)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param1 }} + {{ .Data.Offset }})])) = uint16({{ .Data.Param2 }})
	{{- else }}
	binary.LittleEndian.PutUint16(ctx.Mem[int({{ .Data.Param1 }} + {{ .Data.Offset }}):], uint16({{ .Data.Param2 }}))
	{{- end }}
	{{- else if eq .Data.Op "i64.store" }}
	{{- if $.UseUnsafe }}
	*(*uint64)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param1 }} + {{ .Data.Offset }})])) = uint64({{ .Data.Param2 }})
	{{- else }}
	binary.LittleEndian.PutUint64(ctx.Mem[int({{ .Data.Param1 }} + {{ .Data.Offset }}):], uint64({{ .Data.Param2 }}))
	{{- end }}
	{{- else if eq .Data.Op "f32.store" }}
	{{- if $.UseUnsafe }}
	*(*float32)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param1 }} + {{ .Data.Offset }})])) = {{ .Data.Param2 }}
	{{- else }}
	binary.LittleEndian.PutUint32(ctx.Mem[int({{ .Data.Param1 }} + {{ .Data.Offset }}):], math.Float32bits({{ .Data.Param2 }}))
	{{- end }}
	{{- else if eq .Data.Op "f64.store" }}
	{{- if $.UseUnsafe }}
	*(*float64)(unsafe.Pointer(&ctx.Mem[int({{ .Data.Param1 }} + {{ .Data.Offset }})])) = {{ .Data.Param2 }}
	{{- else }}
	binary.LittleEndian.PutUint64(ctx.Mem[int({{ .Data.Param1 }} + {{ .Data.Offset }}):], math.Float64bits({{ .Data.Param2 }}))
	{{- end }}
	{{- end }}
	{{- else if eq .Name "current_mem" }}
	{{ .Data.Var }} = int32(len(ctx.Mem) / 65536)
	{{- else if eq .Name "grow_mem" }}
	{{ .Data.Var }} = int32(len(ctx.Mem) / 65536)
	{{- if $.MMap }}
	panic("growMem not supported when using mmap yet")
	{{- else }}
	ctx.growMem(int({{ .Data.Param }}) * 65536)
	{{- end }}
	{{- else if and (eq .Name "loop") .Data.HasLabel }}
lbl{{ .Data.LabelID }}:
	{{- else if eq .Name "if" }}
	if {{ .Data.Param }} != 0 {
	{{- else if eq .Name "else" }}
	} else {
	{{- else if eq .Name "br" }}
	goto lbl{{ .Data.LabelID }}
	{{- else if eq .Name "br_if" }}
	if {{ .Data.Param }} != 0 {
		goto lbl{{ .Data.LabelID }}
	}
	{{- else if eq .Name "br_table" }}
	switch {{ .Data.Param }} {
	{{- range .Data.Cases }}
	case {{ .Idx }}:
		goto lbl{{ .LabelID }}
	{{- end }}
	default:
		goto lbl{{ .Data.DefaultLabelID }}
	}
	{{- else if eq .Name "end_if" }}
	}
	{{- if .Data.HasLabel }}
lbl{{ .Data.LabelID }}:
	{{- end }}
	{{- else if and (eq .Name "end_block") .Data.HasLabel }}
lbl{{ .Data.LabelID }}:
	{{- end }}
	{{- end }}
}
